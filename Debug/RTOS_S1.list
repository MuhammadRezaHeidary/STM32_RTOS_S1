
RTOS_S1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08006548  08006548  00016548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800663c  0800663c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800663c  0800663c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800663c  0800663c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800663c  0800663c  0001663c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006640  08006640  00016640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000015e0  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001640  20001640  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c76d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000395f  00000000  00000000  0003c840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017d0  00000000  00000000  000401a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012a4  00000000  00000000  00041970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020e43  00000000  00000000  00042c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e0d0  00000000  00000000  00063a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c5bdd  00000000  00000000  00081b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006a40  00000000  00000000  00147704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0014e144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006530 	.word	0x08006530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006530 	.word	0x08006530

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4a07      	ldr	r2, [pc, #28]	; (80002ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	2000007c 	.word	0x2000007c
 80002b0:	2000011c 	.word	0x2000011c

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b5b0      	push	{r4, r5, r7, lr}
 80002b6:	b08e      	sub	sp, #56	; 0x38
 80002b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ba:	f000 fcf1 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002be:	f000 f839 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c2:	f000 f969 	bl	8000598 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002c6:	f000 f897 	bl	80003f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80002ca:	f000 f8d5 	bl	8000478 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80002ce:	f000 f941 	bl	8000554 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 80002d2:	f000 f90f 	bl	80004f4 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002d6:	4b13      	ldr	r3, [pc, #76]	; (8000324 <main+0x70>)
 80002d8:	f107 041c 	add.w	r4, r7, #28
 80002dc:	461d      	mov	r5, r3
 80002de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002ea:	f107 031c 	add.w	r3, r7, #28
 80002ee:	2100      	movs	r1, #0
 80002f0:	4618      	mov	r0, r3
 80002f2:	f003 fe77 	bl	8003fe4 <osThreadCreate>
 80002f6:	4603      	mov	r3, r0
 80002f8:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <main+0x74>)
 80002fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(myTask02, StartTask02, osPriorityAboveNormal, 0, 128);
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <main+0x78>)
 80002fe:	463c      	mov	r4, r7
 8000300:	461d      	mov	r5, r3
 8000302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000306:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800030a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800030e:	463b      	mov	r3, r7
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f003 fe66 	bl	8003fe4 <osThreadCreate>
 8000318:	4603      	mov	r3, r0
 800031a:	4a05      	ldr	r2, [pc, #20]	; (8000330 <main+0x7c>)
 800031c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800031e:	f003 fe4a 	bl	8003fb6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000322:	e7fe      	b.n	8000322 <main+0x6e>
 8000324:	08006554 	.word	0x08006554
 8000328:	20000748 	.word	0x20000748
 800032c:	0800657c 	.word	0x0800657c
 8000330:	2000074c 	.word	0x2000074c

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b09e      	sub	sp, #120	; 0x78
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800033e:	2228      	movs	r2, #40	; 0x28
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f005 fc1a 	bl	8005b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000348:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
 8000350:	605a      	str	r2, [r3, #4]
 8000352:	609a      	str	r2, [r3, #8]
 8000354:	60da      	str	r2, [r3, #12]
 8000356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000358:	463b      	mov	r3, r7
 800035a:	223c      	movs	r2, #60	; 0x3c
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f005 fc0c 	bl	8005b7c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000364:	2303      	movs	r3, #3
 8000366:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000368:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800036c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000372:	2301      	movs	r3, #1
 8000374:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000376:	2310      	movs	r3, #16
 8000378:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037a:	2302      	movs	r3, #2
 800037c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800037e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000382:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000384:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000388:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800038e:	4618      	mov	r0, r3
 8000390:	f001 f928 	bl	80015e4 <HAL_RCC_OscConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800039a:	f000 fa43 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039e:	230f      	movs	r3, #15
 80003a0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a2:	2302      	movs	r3, #2
 80003a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003b8:	2102      	movs	r1, #2
 80003ba:	4618      	mov	r0, r3
 80003bc:	f002 f950 	bl	8002660 <HAL_RCC_ClockConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003c6:	f000 fa2d 	bl	8000824 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80003ca:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <SystemClock_Config+0xc0>)
 80003cc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003d6:	2300      	movs	r3, #0
 80003d8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003da:	463b      	mov	r3, r7
 80003dc:	4618      	mov	r0, r3
 80003de:	f002 fba7 	bl	8002b30 <HAL_RCCEx_PeriphCLKConfig>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80003e8:	f000 fa1c 	bl	8000824 <Error_Handler>
  }
}
 80003ec:	bf00      	nop
 80003ee:	3778      	adds	r7, #120	; 0x78
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	00020021 	.word	0x00020021

080003f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <MX_I2C1_Init+0x74>)
 80003fe:	4a1c      	ldr	r2, [pc, #112]	; (8000470 <MX_I2C1_Init+0x78>)
 8000400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000402:	4b1a      	ldr	r3, [pc, #104]	; (800046c <MX_I2C1_Init+0x74>)
 8000404:	4a1b      	ldr	r2, [pc, #108]	; (8000474 <MX_I2C1_Init+0x7c>)
 8000406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <MX_I2C1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800040e:	4b17      	ldr	r3, [pc, #92]	; (800046c <MX_I2C1_Init+0x74>)
 8000410:	2201      	movs	r2, #1
 8000412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000414:	4b15      	ldr	r3, [pc, #84]	; (800046c <MX_I2C1_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800041a:	4b14      	ldr	r3, [pc, #80]	; (800046c <MX_I2C1_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000420:	4b12      	ldr	r3, [pc, #72]	; (800046c <MX_I2C1_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <MX_I2C1_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_I2C1_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000432:	480e      	ldr	r0, [pc, #56]	; (800046c <MX_I2C1_Init+0x74>)
 8000434:	f000 fede 	bl	80011f4 <HAL_I2C_Init>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800043e:	f000 f9f1 	bl	8000824 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000442:	2100      	movs	r1, #0
 8000444:	4809      	ldr	r0, [pc, #36]	; (800046c <MX_I2C1_Init+0x74>)
 8000446:	f000 ff64 	bl	8001312 <HAL_I2CEx_ConfigAnalogFilter>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000450:	f000 f9e8 	bl	8000824 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000454:	2100      	movs	r1, #0
 8000456:	4805      	ldr	r0, [pc, #20]	; (800046c <MX_I2C1_Init+0x74>)
 8000458:	f000 ffa6 	bl	80013a8 <HAL_I2CEx_ConfigDigitalFilter>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000462:	f000 f9df 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	2000031c 	.word	0x2000031c
 8000470:	40005400 	.word	0x40005400
 8000474:	2000090e 	.word	0x2000090e

08000478 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <MX_SPI1_Init+0x74>)
 800047e:	4a1c      	ldr	r2, [pc, #112]	; (80004f0 <MX_SPI1_Init+0x78>)
 8000480:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000482:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <MX_SPI1_Init+0x74>)
 8000484:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000488:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <MX_SPI1_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000490:	4b16      	ldr	r3, [pc, #88]	; (80004ec <MX_SPI1_Init+0x74>)
 8000492:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000496:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_SPI1_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800049e:	4b13      	ldr	r3, [pc, #76]	; (80004ec <MX_SPI1_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004a4:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_SPI1_Init+0x74>)
 80004a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_SPI1_Init+0x74>)
 80004ae:	2208      	movs	r2, #8
 80004b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_SPI1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_SPI1_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <MX_SPI1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_SPI1_Init+0x74>)
 80004c6:	2207      	movs	r2, #7
 80004c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <MX_SPI1_Init+0x74>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_SPI1_Init+0x74>)
 80004d2:	2208      	movs	r2, #8
 80004d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <MX_SPI1_Init+0x74>)
 80004d8:	f002 fcda 	bl	8002e90 <HAL_SPI_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004e2:	f000 f99f 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000370 	.word	0x20000370
 80004f0:	40013000 	.word	0x40013000

080004f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <MX_USART1_UART_Init+0x58>)
 80004fa:	4a15      	ldr	r2, [pc, #84]	; (8000550 <MX_USART1_UART_Init+0x5c>)
 80004fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <MX_USART1_UART_Init+0x58>)
 8000500:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000504:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000506:	4b11      	ldr	r3, [pc, #68]	; (800054c <MX_USART1_UART_Init+0x58>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800050c:	4b0f      	ldr	r3, [pc, #60]	; (800054c <MX_USART1_UART_Init+0x58>)
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <MX_USART1_UART_Init+0x58>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <MX_USART1_UART_Init+0x58>)
 800051a:	220c      	movs	r2, #12
 800051c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <MX_USART1_UART_Init+0x58>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <MX_USART1_UART_Init+0x58>)
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <MX_USART1_UART_Init+0x58>)
 800052c:	2200      	movs	r2, #0
 800052e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <MX_USART1_UART_Init+0x58>)
 8000532:	2200      	movs	r2, #0
 8000534:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <MX_USART1_UART_Init+0x58>)
 8000538:	f003 f816 	bl	8003568 <HAL_UART_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000542:	f000 f96f 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	200003d4 	.word	0x200003d4
 8000550:	40013800 	.word	0x40013800

08000554 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000558:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <MX_USB_PCD_Init+0x3c>)
 800055a:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <MX_USB_PCD_Init+0x40>)
 800055c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <MX_USB_PCD_Init+0x3c>)
 8000560:	2208      	movs	r2, #8
 8000562:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000564:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <MX_USB_PCD_Init+0x3c>)
 8000566:	2202      	movs	r2, #2
 8000568:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <MX_USB_PCD_Init+0x3c>)
 800056c:	2202      	movs	r2, #2
 800056e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <MX_USB_PCD_Init+0x3c>)
 8000572:	2200      	movs	r2, #0
 8000574:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MX_USB_PCD_Init+0x3c>)
 8000578:	2200      	movs	r2, #0
 800057a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800057c:	4804      	ldr	r0, [pc, #16]	; (8000590 <MX_USB_PCD_Init+0x3c>)
 800057e:	f000 ff5f 	bl	8001440 <HAL_PCD_Init>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000588:	f000 f94c 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000045c 	.word	0x2000045c
 8000594:	40005c00 	.word	0x40005c00

08000598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ae:	4b37      	ldr	r3, [pc, #220]	; (800068c <MX_GPIO_Init+0xf4>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a36      	ldr	r2, [pc, #216]	; (800068c <MX_GPIO_Init+0xf4>)
 80005b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b34      	ldr	r3, [pc, #208]	; (800068c <MX_GPIO_Init+0xf4>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	4b31      	ldr	r3, [pc, #196]	; (800068c <MX_GPIO_Init+0xf4>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a30      	ldr	r2, [pc, #192]	; (800068c <MX_GPIO_Init+0xf4>)
 80005cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b2e      	ldr	r3, [pc, #184]	; (800068c <MX_GPIO_Init+0xf4>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005de:	4b2b      	ldr	r3, [pc, #172]	; (800068c <MX_GPIO_Init+0xf4>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a2a      	ldr	r2, [pc, #168]	; (800068c <MX_GPIO_Init+0xf4>)
 80005e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b28      	ldr	r3, [pc, #160]	; (800068c <MX_GPIO_Init+0xf4>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b25      	ldr	r3, [pc, #148]	; (800068c <MX_GPIO_Init+0xf4>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a24      	ldr	r2, [pc, #144]	; (800068c <MX_GPIO_Init+0xf4>)
 80005fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000600:	6153      	str	r3, [r2, #20]
 8000602:	4b22      	ldr	r3, [pc, #136]	; (800068c <MX_GPIO_Init+0xf4>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b1f      	ldr	r3, [pc, #124]	; (800068c <MX_GPIO_Init+0xf4>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a1e      	ldr	r2, [pc, #120]	; (800068c <MX_GPIO_Init+0xf4>)
 8000614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b1c      	ldr	r3, [pc, #112]	; (800068c <MX_GPIO_Init+0xf4>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000626:	2200      	movs	r2, #0
 8000628:	f64f 7108 	movw	r1, #65288	; 0xff08
 800062c:	4818      	ldr	r0, [pc, #96]	; (8000690 <MX_GPIO_Init+0xf8>)
 800062e:	f000 fdc9 	bl	80011c4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000632:	2337      	movs	r3, #55	; 0x37
 8000634:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000636:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800063a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	4812      	ldr	r0, [pc, #72]	; (8000690 <MX_GPIO_Init+0xf8>)
 8000648:	f000 fc42 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800064c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000650:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	480a      	ldr	r0, [pc, #40]	; (8000690 <MX_GPIO_Init+0xf8>)
 8000666:	f000 fc33 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800066a:	2301      	movs	r3, #1
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000680:	f000 fc26 	bl	8000ed0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000684:	bf00      	nop
 8000686:	3728      	adds	r7, #40	; 0x28
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40021000 	.word	0x40021000
 8000690:	48001000 	.word	0x48001000

08000694 <taskdefault_send>:

/* USER CODE BEGIN 4 */
void taskdefault_send() {
 8000694:	b580      	push	{r7, lr}
 8000696:	b08e      	sub	sp, #56	; 0x38
 8000698:	af00      	add	r7, sp, #0
	uint8_t data[50];
	countTaskDefault++;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <taskdefault_send+0x40>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	3301      	adds	r3, #1
 80006a0:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <taskdefault_send+0x40>)
 80006a2:	6013      	str	r3, [r2, #0]
    sprintf(data, "Task Default   => %d \r\n", countTaskDefault);
 80006a4:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <taskdefault_send+0x40>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	490b      	ldr	r1, [pc, #44]	; (80006d8 <taskdefault_send+0x44>)
 80006ac:	4618      	mov	r0, r3
 80006ae:	f005 fa45 	bl	8005b3c <siprintf>
	HAL_UART_Transmit(&huart1, data, strlen(data), 500);
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff fd8b 	bl	80001d0 <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b29a      	uxth	r2, r3
 80006be:	1d39      	adds	r1, r7, #4
 80006c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <taskdefault_send+0x48>)
 80006c6:	f002 ff9d 	bl	8003604 <HAL_UART_Transmit>
}
 80006ca:	bf00      	nop
 80006cc:	3738      	adds	r7, #56	; 0x38
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000750 	.word	0x20000750
 80006d8:	08006598 	.word	0x08006598
 80006dc:	200003d4 	.word	0x200003d4

080006e0 <task02_send>:

void task02_send() {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08e      	sub	sp, #56	; 0x38
 80006e4:	af00      	add	r7, sp, #0
	uint8_t data[50];
	countTask02++;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <task02_send+0x40>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <task02_send+0x40>)
 80006ee:	6013      	str	r3, [r2, #0]
    sprintf(data, "Task 02        => %d \r\n", countTask02);
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <task02_send+0x40>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	490b      	ldr	r1, [pc, #44]	; (8000724 <task02_send+0x44>)
 80006f8:	4618      	mov	r0, r3
 80006fa:	f005 fa1f 	bl	8005b3c <siprintf>
    HAL_UART_Transmit(&huart1, data, strlen(data), 500);
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff fd65 	bl	80001d0 <strlen>
 8000706:	4603      	mov	r3, r0
 8000708:	b29a      	uxth	r2, r3
 800070a:	1d39      	adds	r1, r7, #4
 800070c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <task02_send+0x48>)
 8000712:	f002 ff77 	bl	8003604 <HAL_UART_Transmit>
}
 8000716:	bf00      	nop
 8000718:	3738      	adds	r7, #56	; 0x38
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000754 	.word	0x20000754
 8000724:	080065b0 	.word	0x080065b0
 8000728:	200003d4 	.word	0x200003d4

0800072c <StartTask02>:


void StartTask02(void const * argument)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  task02_send();
 8000734:	f7ff ffd4 	bl	80006e0 <task02_send>
	  if(countTask02 == 4) {
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <StartTask02+0x50>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b04      	cmp	r3, #4
 800073e:	d105      	bne.n	800074c <StartTask02+0x20>
		  osThreadSuspend(defaultTaskHandle);
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <StartTask02+0x54>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f003 fcb9 	bl	80040bc <osThreadSuspend>
 800074a:	e012      	b.n	8000772 <StartTask02+0x46>
	  }
	  else if(countTask02 == 10) {
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <StartTask02+0x50>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b0a      	cmp	r3, #10
 8000752:	d105      	bne.n	8000760 <StartTask02+0x34>
		  osThreadResume(defaultTaskHandle);
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <StartTask02+0x54>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f003 fcbb 	bl	80040d4 <osThreadResume>
 800075e:	e008      	b.n	8000772 <StartTask02+0x46>
	  }
	  else if(countTask02 == 12) {
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <StartTask02+0x50>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b0c      	cmp	r3, #12
 8000766:	d104      	bne.n	8000772 <StartTask02+0x46>
		  osThreadSuspend(myTask02Handle);
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <StartTask02+0x58>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	f003 fca5 	bl	80040bc <osThreadSuspend>
	  }
	  osDelay(2000);
 8000772:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000776:	f003 fc8d 	bl	8004094 <osDelay>
	  task02_send();
 800077a:	e7db      	b.n	8000734 <StartTask02+0x8>
 800077c:	20000754 	.word	0x20000754
 8000780:	20000748 	.word	0x20000748
 8000784:	2000074c 	.word	0x2000074c

08000788 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  taskdefault_send();
 8000790:	f7ff ff80 	bl	8000694 <taskdefault_send>
	  if(countTaskDefault == 27) {
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <StartDefaultTask+0x70>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b1b      	cmp	r3, #27
 800079a:	d10b      	bne.n	80007b4 <StartDefaultTask+0x2c>
		  uint32_t previousWakeTime = osKernelSysTick();
 800079c:	f003 fc12 	bl	8003fc4 <osKernelSysTick>
 80007a0:	4603      	mov	r3, r0
 80007a2:	60fb      	str	r3, [r7, #12]
		  osDelayUntil(&previousWakeTime, 10000); // block this task for 10 seconds
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	f242 7110 	movw	r1, #10000	; 0x2710
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 fcb3 	bl	8004118 <osDelayUntil>
 80007b2:	e01c      	b.n	80007ee <StartDefaultTask+0x66>
	  }
	  else if(countTaskDefault == 30) {
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <StartDefaultTask+0x70>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b1e      	cmp	r3, #30
 80007ba:	d105      	bne.n	80007c8 <StartDefaultTask+0x40>
		  osThreadResume(myTask02Handle);
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <StartDefaultTask+0x74>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f003 fc87 	bl	80040d4 <osThreadResume>
 80007c6:	e012      	b.n	80007ee <StartDefaultTask+0x66>
	  }
	  else if(countTaskDefault == 40) {
 80007c8:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <StartDefaultTask+0x70>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b28      	cmp	r3, #40	; 0x28
 80007ce:	d105      	bne.n	80007dc <StartDefaultTask+0x54>
		  osThreadTerminate(myTask02Handle);
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <StartDefaultTask+0x74>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f003 fc51 	bl	800407c <osThreadTerminate>
 80007da:	e008      	b.n	80007ee <StartDefaultTask+0x66>
	  }
	  else if(countTaskDefault == 45) {
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <StartDefaultTask+0x70>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b2d      	cmp	r3, #45	; 0x2d
 80007e2:	d104      	bne.n	80007ee <StartDefaultTask+0x66>
		  osThreadResume(myTask02Handle);
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <StartDefaultTask+0x74>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fc73 	bl	80040d4 <osThreadResume>
	  }
	  osDelay(1000);
 80007ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f2:	f003 fc4f 	bl	8004094 <osDelay>
	  taskdefault_send();
 80007f6:	e7cb      	b.n	8000790 <StartDefaultTask+0x8>
 80007f8:	20000750 	.word	0x20000750
 80007fc:	2000074c 	.word	0x2000074c

08000800 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d101      	bne.n	8000816 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000812:	f000 fa5b 	bl	8000ccc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40012c00 	.word	0x40012c00

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <HAL_MspInit+0x4c>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	4a10      	ldr	r2, [pc, #64]	; (800087c <HAL_MspInit+0x4c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6193      	str	r3, [r2, #24]
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <HAL_MspInit+0x4c>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <HAL_MspInit+0x4c>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <HAL_MspInit+0x4c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_MspInit+0x4c>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	210f      	movs	r1, #15
 800086a:	f06f 0001 	mvn.w	r0, #1
 800086e:	f000 fb05 	bl	8000e7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a17      	ldr	r2, [pc, #92]	; (80008fc <HAL_I2C_MspInit+0x7c>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d127      	bne.n	80008f2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <HAL_I2C_MspInit+0x80>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a16      	ldr	r2, [pc, #88]	; (8000900 <HAL_I2C_MspInit+0x80>)
 80008a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ac:	6153      	str	r3, [r2, #20]
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <HAL_I2C_MspInit+0x80>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80008ba:	23c0      	movs	r3, #192	; 0xc0
 80008bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008be:	2312      	movs	r3, #18
 80008c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c6:	2303      	movs	r3, #3
 80008c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ca:	2304      	movs	r3, #4
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <HAL_I2C_MspInit+0x84>)
 80008d6:	f000 fafb 	bl	8000ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <HAL_I2C_MspInit+0x80>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	4a08      	ldr	r2, [pc, #32]	; (8000900 <HAL_I2C_MspInit+0x80>)
 80008e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008e4:	61d3      	str	r3, [r2, #28]
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_I2C_MspInit+0x80>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008f2:	bf00      	nop
 80008f4:	3728      	adds	r7, #40	; 0x28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40005400 	.word	0x40005400
 8000900:	40021000 	.word	0x40021000
 8000904:	48000400 	.word	0x48000400

08000908 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a17      	ldr	r2, [pc, #92]	; (8000984 <HAL_SPI_MspInit+0x7c>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d128      	bne.n	800097c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <HAL_SPI_MspInit+0x80>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	4a16      	ldr	r2, [pc, #88]	; (8000988 <HAL_SPI_MspInit+0x80>)
 8000930:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000934:	6193      	str	r3, [r2, #24]
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <HAL_SPI_MspInit+0x80>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_SPI_MspInit+0x80>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	4a10      	ldr	r2, [pc, #64]	; (8000988 <HAL_SPI_MspInit+0x80>)
 8000948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094c:	6153      	str	r3, [r2, #20]
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_SPI_MspInit+0x80>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800095a:	23e0      	movs	r3, #224	; 0xe0
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800096a:	2305      	movs	r3, #5
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000978:	f000 faaa 	bl	8000ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40013000 	.word	0x40013000
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <HAL_UART_MspInit+0x7c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d127      	bne.n	80009fe <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	4a16      	ldr	r2, [pc, #88]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b8:	6193      	str	r3, [r2, #24]
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009d0:	6153      	str	r3, [r2, #20]
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <HAL_UART_MspInit+0x80>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009de:	2330      	movs	r3, #48	; 0x30
 80009e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009ee:	2307      	movs	r3, #7
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <HAL_UART_MspInit+0x84>)
 80009fa:	f000 fa69 	bl	8000ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40013800 	.word	0x40013800
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	48000800 	.word	0x48000800

08000a14 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a18      	ldr	r2, [pc, #96]	; (8000a94 <HAL_PCD_MspInit+0x80>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d129      	bne.n	8000a8a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <HAL_PCD_MspInit+0x84>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	4a17      	ldr	r2, [pc, #92]	; (8000a98 <HAL_PCD_MspInit+0x84>)
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a40:	6153      	str	r3, [r2, #20]
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_PCD_MspInit+0x84>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000a4e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000a60:	230e      	movs	r3, #14
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6e:	f000 fa2f 	bl	8000ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <HAL_PCD_MspInit+0x84>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <HAL_PCD_MspInit+0x84>)
 8000a78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a7c:	61d3      	str	r3, [r2, #28]
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_PCD_MspInit+0x84>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40005c00 	.word	0x40005c00
 8000a98:	40021000 	.word	0x40021000

08000a9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	; 0x30
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000aac:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <HAL_InitTick+0xcc>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a2d      	ldr	r2, [pc, #180]	; (8000b68 <HAL_InitTick+0xcc>)
 8000ab2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <HAL_InitTick+0xcc>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ac4:	f107 020c 	add.w	r2, r7, #12
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fffc 	bl	8002acc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ad4:	f001 ffd8 	bl	8002a88 <HAL_RCC_GetPCLK2Freq>
 8000ad8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000adc:	4a23      	ldr	r2, [pc, #140]	; (8000b6c <HAL_InitTick+0xd0>)
 8000ade:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae2:	0c9b      	lsrs	r3, r3, #18
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ae8:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <HAL_InitTick+0xd4>)
 8000aea:	4a22      	ldr	r2, [pc, #136]	; (8000b74 <HAL_InitTick+0xd8>)
 8000aec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000aee:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <HAL_InitTick+0xd4>)
 8000af0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000af4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000af6:	4a1e      	ldr	r2, [pc, #120]	; (8000b70 <HAL_InitTick+0xd4>)
 8000af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000afc:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <HAL_InitTick+0xd4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <HAL_InitTick+0xd4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b08:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <HAL_InitTick+0xd4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b0e:	4818      	ldr	r0, [pc, #96]	; (8000b70 <HAL_InitTick+0xd4>)
 8000b10:	f002 fa69 	bl	8002fe6 <HAL_TIM_Base_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d11b      	bne.n	8000b5a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b22:	4813      	ldr	r0, [pc, #76]	; (8000b70 <HAL_InitTick+0xd4>)
 8000b24:	f002 fac0 	bl	80030a8 <HAL_TIM_Base_Start_IT>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d111      	bne.n	8000b5a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b36:	2019      	movs	r0, #25
 8000b38:	f000 f9bc 	bl	8000eb4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b0f      	cmp	r3, #15
 8000b40:	d808      	bhi.n	8000b54 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000b42:	2200      	movs	r2, #0
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	2019      	movs	r0, #25
 8000b48:	f000 f998 	bl	8000e7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <HAL_InitTick+0xdc>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	e002      	b.n	8000b5a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3730      	adds	r7, #48	; 0x30
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	431bde83 	.word	0x431bde83
 8000b70:	20000758 	.word	0x20000758
 8000b74:	40012c00 	.word	0x40012c00
 8000b78:	20000004 	.word	0x20000004

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b80:	e7fe      	b.n	8000b80 <NMI_Handler+0x4>

08000b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <MemManage_Handler+0x4>

08000b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bae:	f002 fae5 	bl	800317c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000758 	.word	0x20000758

08000bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc4:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <_sbrk+0x5c>)
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <_sbrk+0x60>)
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d102      	bne.n	8000bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <_sbrk+0x64>)
 8000bda:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <_sbrk+0x68>)
 8000bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d207      	bcs.n	8000bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bec:	f005 f824 	bl	8005c38 <__errno>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	e009      	b.n	8000c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <_sbrk+0x64>)
 8000c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2000a000 	.word	0x2000a000
 8000c1c:	00000400 	.word	0x00000400
 8000c20:	200007a4 	.word	0x200007a4
 8000c24:	20001640 	.word	0x20001640

08000c28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c84 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c50:	f7ff ffea 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c56:	490d      	ldr	r1, [pc, #52]	; (8000c8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <LoopForever+0xe>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	; (8000c98 <LoopForever+0x16>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f004 ffe3 	bl	8005c44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c7e:	f7ff fb19 	bl	80002b4 <main>

08000c82 <LoopForever>:

LoopForever:
    b LoopForever
 8000c82:	e7fe      	b.n	8000c82 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c84:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c90:	08006644 	.word	0x08006644
  ldr r2, =_sbss
 8000c94:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c98:	20001640 	.word	0x20001640

08000c9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC1_2_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_Init+0x28>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_Init+0x28>)
 8000caa:	f043 0310 	orr.w	r3, r3, #16
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f8d8 	bl	8000e66 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb6:	200f      	movs	r0, #15
 8000cb8:	f7ff fef0 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbc:	f7ff fdb8 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40022000 	.word	0x40022000

08000ccc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	200007a8 	.word	0x200007a8

08000cf4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	200007a8 	.word	0x200007a8

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db0b      	blt.n	8000d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 021f 	and.w	r2, r3, #31
 8000d88:	4907      	ldr	r1, [pc, #28]	; (8000da8 <__NVIC_EnableIRQ+0x38>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	; (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	; (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f1c3 0307 	rsb	r3, r3, #7
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf28      	it	cs
 8000e1e:	2304      	movcs	r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d902      	bls.n	8000e30 <NVIC_EncodePriority+0x30>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3b03      	subs	r3, #3
 8000e2e:	e000      	b.n	8000e32 <NVIC_EncodePriority+0x32>
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	4313      	orrs	r3, r2
         );
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	; 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ff4c 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8e:	f7ff ff61 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000e92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	68b9      	ldr	r1, [r7, #8]
 8000e98:	6978      	ldr	r0, [r7, #20]
 8000e9a:	f7ff ffb1 	bl	8000e00 <NVIC_EncodePriority>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff80 	bl	8000dac <__NVIC_SetPriority>
}
 8000eac:	bf00      	nop
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff54 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ede:	e154      	b.n	800118a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	4013      	ands	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 8146 	beq.w	8001184 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d005      	beq.n	8000f10 <HAL_GPIO_Init+0x40>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d130      	bne.n	8000f72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f46:	2201      	movs	r2, #1
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	091b      	lsrs	r3, r3, #4
 8000f5c:	f003 0201 	and.w	r2, r3, #1
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d017      	beq.n	8000fae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d123      	bne.n	8001002 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	08da      	lsrs	r2, r3, #3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3208      	adds	r2, #8
 8000fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	691a      	ldr	r2, [r3, #16]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	6939      	ldr	r1, [r7, #16]
 8000ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0203 	and.w	r2, r3, #3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800103e:	2b00      	cmp	r3, #0
 8001040:	f000 80a0 	beq.w	8001184 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001044:	4b58      	ldr	r3, [pc, #352]	; (80011a8 <HAL_GPIO_Init+0x2d8>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a57      	ldr	r2, [pc, #348]	; (80011a8 <HAL_GPIO_Init+0x2d8>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b55      	ldr	r3, [pc, #340]	; (80011a8 <HAL_GPIO_Init+0x2d8>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800105c:	4a53      	ldr	r2, [pc, #332]	; (80011ac <HAL_GPIO_Init+0x2dc>)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001086:	d019      	beq.n	80010bc <HAL_GPIO_Init+0x1ec>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a49      	ldr	r2, [pc, #292]	; (80011b0 <HAL_GPIO_Init+0x2e0>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d013      	beq.n	80010b8 <HAL_GPIO_Init+0x1e8>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a48      	ldr	r2, [pc, #288]	; (80011b4 <HAL_GPIO_Init+0x2e4>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d00d      	beq.n	80010b4 <HAL_GPIO_Init+0x1e4>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a47      	ldr	r2, [pc, #284]	; (80011b8 <HAL_GPIO_Init+0x2e8>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d007      	beq.n	80010b0 <HAL_GPIO_Init+0x1e0>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a46      	ldr	r2, [pc, #280]	; (80011bc <HAL_GPIO_Init+0x2ec>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d101      	bne.n	80010ac <HAL_GPIO_Init+0x1dc>
 80010a8:	2304      	movs	r3, #4
 80010aa:	e008      	b.n	80010be <HAL_GPIO_Init+0x1ee>
 80010ac:	2305      	movs	r3, #5
 80010ae:	e006      	b.n	80010be <HAL_GPIO_Init+0x1ee>
 80010b0:	2303      	movs	r3, #3
 80010b2:	e004      	b.n	80010be <HAL_GPIO_Init+0x1ee>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e002      	b.n	80010be <HAL_GPIO_Init+0x1ee>
 80010b8:	2301      	movs	r3, #1
 80010ba:	e000      	b.n	80010be <HAL_GPIO_Init+0x1ee>
 80010bc:	2300      	movs	r3, #0
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	f002 0203 	and.w	r2, r2, #3
 80010c4:	0092      	lsls	r2, r2, #2
 80010c6:	4093      	lsls	r3, r2
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010ce:	4937      	ldr	r1, [pc, #220]	; (80011ac <HAL_GPIO_Init+0x2dc>)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	089b      	lsrs	r3, r3, #2
 80010d4:	3302      	adds	r3, #2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010dc:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001100:	4a2f      	ldr	r2, [pc, #188]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001106:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800112a:	4a25      	ldr	r2, [pc, #148]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001130:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001154:	4a1a      	ldr	r2, [pc, #104]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	fa22 f303 	lsr.w	r3, r2, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	f47f aea3 	bne.w	8000ee0 <HAL_GPIO_Init+0x10>
  }
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	371c      	adds	r7, #28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010000 	.word	0x40010000
 80011b0:	48000400 	.word	0x48000400
 80011b4:	48000800 	.word	0x48000800
 80011b8:	48000c00 	.word	0x48000c00
 80011bc:	48001000 	.word	0x48001000
 80011c0:	40010400 	.word	0x40010400

080011c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	807b      	strh	r3, [r7, #2]
 80011d0:	4613      	mov	r3, r2
 80011d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d4:	787b      	ldrb	r3, [r7, #1]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011e0:	e002      	b.n	80011e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e081      	b.n	800130a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d106      	bne.n	8001220 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fb30 	bl	8000880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2224      	movs	r2, #36	; 0x24
 8001224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0201 	bic.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001244:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001254:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d107      	bne.n	800126e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	e006      	b.n	800127c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800127a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d104      	bne.n	800128e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800128c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800129c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691a      	ldr	r2, [r3, #16]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69d9      	ldr	r1, [r3, #28]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a1a      	ldr	r2, [r3, #32]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0201 	orr.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2220      	movs	r2, #32
 80012f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b20      	cmp	r3, #32
 8001326:	d138      	bne.n	800139a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800132e:	2b01      	cmp	r3, #1
 8001330:	d101      	bne.n	8001336 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001332:	2302      	movs	r3, #2
 8001334:	e032      	b.n	800139c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2224      	movs	r2, #36	; 0x24
 8001342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0201 	bic.w	r2, r2, #1
 8001354:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001364:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6819      	ldr	r1, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f042 0201 	orr.w	r2, r2, #1
 8001384:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2220      	movs	r2, #32
 800138a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800139a:	2302      	movs	r3, #2
  }
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b20      	cmp	r3, #32
 80013bc:	d139      	bne.n	8001432 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e033      	b.n	8001434 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2224      	movs	r2, #36	; 0x24
 80013d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0201 	bic.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f042 0201 	orr.w	r2, r2, #1
 800141c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2220      	movs	r2, #32
 8001422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001432:	2302      	movs	r3, #2
  }
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001442:	b08b      	sub	sp, #44	; 0x2c
 8001444:	af06      	add	r7, sp, #24
 8001446:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e0c4      	b.n	80015dc <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d106      	bne.n	800146c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fad4 	bl	8000a14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2203      	movs	r2, #3
 8001470:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f002 fd36 	bl	8003eea <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
 8001482:	e040      	b.n	8001506 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	440b      	add	r3, r1
 8001494:	3301      	adds	r3, #1
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	440b      	add	r3, r1
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	440b      	add	r3, r1
 80014be:	3303      	adds	r3, #3
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	3338      	adds	r3, #56	; 0x38
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	440b      	add	r3, r1
 80014e6:	333c      	adds	r3, #60	; 0x3c
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	440b      	add	r3, r1
 80014fa:	3340      	adds	r3, #64	; 0x40
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	3301      	adds	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	d3b9      	bcc.n	8001484 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e044      	b.n	80015a0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001516:	7bfa      	ldrb	r2, [r7, #15]
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	440b      	add	r3, r1
 8001524:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	440b      	add	r3, r1
 800153a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	440b      	add	r3, r1
 8001550:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	440b      	add	r3, r1
 8001566:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	440b      	add	r3, r1
 800157c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	3301      	adds	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d3b5      	bcc.n	8001516 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	687e      	ldr	r6, [r7, #4]
 80015b2:	466d      	mov	r5, sp
 80015b4:	f106 0410 	add.w	r4, r6, #16
 80015b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015bc:	6823      	ldr	r3, [r4, #0]
 80015be:	602b      	str	r3, [r5, #0]
 80015c0:	1d33      	adds	r3, r6, #4
 80015c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c4:	6838      	ldr	r0, [r7, #0]
 80015c6:	f002 fcab 	bl	8003f20 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015f4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	f001 b823 	b.w	8002650 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 817d 	beq.w	800191a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001620:	4bbc      	ldr	r3, [pc, #752]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 030c 	and.w	r3, r3, #12
 8001628:	2b04      	cmp	r3, #4
 800162a:	d00c      	beq.n	8001646 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800162c:	4bb9      	ldr	r3, [pc, #740]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 030c 	and.w	r3, r3, #12
 8001634:	2b08      	cmp	r3, #8
 8001636:	d15c      	bne.n	80016f2 <HAL_RCC_OscConfig+0x10e>
 8001638:	4bb6      	ldr	r3, [pc, #728]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001644:	d155      	bne.n	80016f2 <HAL_RCC_OscConfig+0x10e>
 8001646:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800164a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001652:	fa93 f3a3 	rbit	r3, r3
 8001656:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800165a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165e:	fab3 f383 	clz	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	095b      	lsrs	r3, r3, #5
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b01      	cmp	r3, #1
 8001670:	d102      	bne.n	8001678 <HAL_RCC_OscConfig+0x94>
 8001672:	4ba8      	ldr	r3, [pc, #672]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	e015      	b.n	80016a4 <HAL_RCC_OscConfig+0xc0>
 8001678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800167c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001680:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001684:	fa93 f3a3 	rbit	r3, r3
 8001688:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800168c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001690:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001694:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001698:	fa93 f3a3 	rbit	r3, r3
 800169c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80016a0:	4b9c      	ldr	r3, [pc, #624]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016a8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80016ac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80016b0:	fa92 f2a2 	rbit	r2, r2
 80016b4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80016b8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80016bc:	fab2 f282 	clz	r2, r2
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	f042 0220 	orr.w	r2, r2, #32
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	f002 021f 	and.w	r2, r2, #31
 80016cc:	2101      	movs	r1, #1
 80016ce:	fa01 f202 	lsl.w	r2, r1, r2
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 811f 	beq.w	8001918 <HAL_RCC_OscConfig+0x334>
 80016da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f040 8116 	bne.w	8001918 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	f000 bfaf 	b.w	8002650 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001702:	d106      	bne.n	8001712 <HAL_RCC_OscConfig+0x12e>
 8001704:	4b83      	ldr	r3, [pc, #524]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a82      	ldr	r2, [pc, #520]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 800170a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	e036      	b.n	8001780 <HAL_RCC_OscConfig+0x19c>
 8001712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001716:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0x158>
 8001722:	4b7c      	ldr	r3, [pc, #496]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a7b      	ldr	r2, [pc, #492]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 8001728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b79      	ldr	r3, [pc, #484]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a78      	ldr	r2, [pc, #480]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 8001734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e021      	b.n	8001780 <HAL_RCC_OscConfig+0x19c>
 800173c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001740:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x184>
 800174e:	4b71      	ldr	r3, [pc, #452]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a70      	ldr	r2, [pc, #448]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 8001754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b6e      	ldr	r3, [pc, #440]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a6d      	ldr	r2, [pc, #436]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 8001760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e00b      	b.n	8001780 <HAL_RCC_OscConfig+0x19c>
 8001768:	4b6a      	ldr	r3, [pc, #424]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a69      	ldr	r2, [pc, #420]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 800176e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b67      	ldr	r3, [pc, #412]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a66      	ldr	r2, [pc, #408]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 800177a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001780:	4b64      	ldr	r3, [pc, #400]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	f023 020f 	bic.w	r2, r3, #15
 8001788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	495f      	ldr	r1, [pc, #380]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 8001796:	4313      	orrs	r3, r2
 8001798:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800179a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d059      	beq.n	800185e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff faa3 	bl	8000cf4 <HAL_GetTick>
 80017ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff fa9e 	bl	8000cf4 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b64      	cmp	r3, #100	; 0x64
 80017c2:	d902      	bls.n	80017ca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	f000 bf43 	b.w	8002650 <HAL_RCC_OscConfig+0x106c>
 80017ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ce:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80017de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	fab3 f383 	clz	r3, r3
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	095b      	lsrs	r3, r3, #5
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d102      	bne.n	80017fc <HAL_RCC_OscConfig+0x218>
 80017f6:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	e015      	b.n	8001828 <HAL_RCC_OscConfig+0x244>
 80017fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001800:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001808:	fa93 f3a3 	rbit	r3, r3
 800180c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001810:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001814:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001818:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800181c:	fa93 f3a3 	rbit	r3, r3
 8001820:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001824:	4b3b      	ldr	r3, [pc, #236]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800182c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001830:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001834:	fa92 f2a2 	rbit	r2, r2
 8001838:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800183c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001840:	fab2 f282 	clz	r2, r2
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	f042 0220 	orr.w	r2, r2, #32
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	f002 021f 	and.w	r2, r2, #31
 8001850:	2101      	movs	r1, #1
 8001852:	fa01 f202 	lsl.w	r2, r1, r2
 8001856:	4013      	ands	r3, r2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0ab      	beq.n	80017b4 <HAL_RCC_OscConfig+0x1d0>
 800185c:	e05d      	b.n	800191a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185e:	f7ff fa49 	bl	8000cf4 <HAL_GetTick>
 8001862:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001866:	e00a      	b.n	800187e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff fa44 	bl	8000cf4 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b64      	cmp	r3, #100	; 0x64
 8001876:	d902      	bls.n	800187e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	f000 bee9 	b.w	8002650 <HAL_RCC_OscConfig+0x106c>
 800187e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001882:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001892:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	095b      	lsrs	r3, r3, #5
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d102      	bne.n	80018b0 <HAL_RCC_OscConfig+0x2cc>
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	e015      	b.n	80018dc <HAL_RCC_OscConfig+0x2f8>
 80018b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80018c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80018cc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80018d0:	fa93 f3a3 	rbit	r3, r3
 80018d4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_RCC_OscConfig+0x330>)
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018e0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80018e4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80018e8:	fa92 f2a2 	rbit	r2, r2
 80018ec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80018f0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80018f4:	fab2 f282 	clz	r2, r2
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	f042 0220 	orr.w	r2, r2, #32
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	f002 021f 	and.w	r2, r2, #31
 8001904:	2101      	movs	r1, #1
 8001906:	fa01 f202 	lsl.w	r2, r1, r2
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1ab      	bne.n	8001868 <HAL_RCC_OscConfig+0x284>
 8001910:	e003      	b.n	800191a <HAL_RCC_OscConfig+0x336>
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 817d 	beq.w	8001c2a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001930:	4ba6      	ldr	r3, [pc, #664]	; (8001bcc <HAL_RCC_OscConfig+0x5e8>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00b      	beq.n	8001954 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800193c:	4ba3      	ldr	r3, [pc, #652]	; (8001bcc <HAL_RCC_OscConfig+0x5e8>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	2b08      	cmp	r3, #8
 8001946:	d172      	bne.n	8001a2e <HAL_RCC_OscConfig+0x44a>
 8001948:	4ba0      	ldr	r3, [pc, #640]	; (8001bcc <HAL_RCC_OscConfig+0x5e8>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d16c      	bne.n	8001a2e <HAL_RCC_OscConfig+0x44a>
 8001954:	2302      	movs	r3, #2
 8001956:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800195e:	fa93 f3a3 	rbit	r3, r3
 8001962:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001966:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196a:	fab3 f383 	clz	r3, r3
 800196e:	b2db      	uxtb	r3, r3
 8001970:	095b      	lsrs	r3, r3, #5
 8001972:	b2db      	uxtb	r3, r3
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d102      	bne.n	8001984 <HAL_RCC_OscConfig+0x3a0>
 800197e:	4b93      	ldr	r3, [pc, #588]	; (8001bcc <HAL_RCC_OscConfig+0x5e8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	e013      	b.n	80019ac <HAL_RCC_OscConfig+0x3c8>
 8001984:	2302      	movs	r3, #2
 8001986:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800198e:	fa93 f3a3 	rbit	r3, r3
 8001992:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001996:	2302      	movs	r3, #2
 8001998:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800199c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80019a0:	fa93 f3a3 	rbit	r3, r3
 80019a4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80019a8:	4b88      	ldr	r3, [pc, #544]	; (8001bcc <HAL_RCC_OscConfig+0x5e8>)
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	2202      	movs	r2, #2
 80019ae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80019b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019b6:	fa92 f2a2 	rbit	r2, r2
 80019ba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80019be:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80019c2:	fab2 f282 	clz	r2, r2
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	f042 0220 	orr.w	r2, r2, #32
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	f002 021f 	and.w	r2, r2, #31
 80019d2:	2101      	movs	r1, #1
 80019d4:	fa01 f202 	lsl.w	r2, r1, r2
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00a      	beq.n	80019f4 <HAL_RCC_OscConfig+0x410>
 80019de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d002      	beq.n	80019f4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	f000 be2e 	b.w	8002650 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f4:	4b75      	ldr	r3, [pc, #468]	; (8001bcc <HAL_RCC_OscConfig+0x5e8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	21f8      	movs	r1, #248	; 0xf8
 8001a0a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a12:	fa91 f1a1 	rbit	r1, r1
 8001a16:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001a1a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001a1e:	fab1 f181 	clz	r1, r1
 8001a22:	b2c9      	uxtb	r1, r1
 8001a24:	408b      	lsls	r3, r1
 8001a26:	4969      	ldr	r1, [pc, #420]	; (8001bcc <HAL_RCC_OscConfig+0x5e8>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2c:	e0fd      	b.n	8001c2a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 8088 	beq.w	8001b50 <HAL_RCC_OscConfig+0x56c>
 8001a40:	2301      	movs	r3, #1
 8001a42:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001a52:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a56:	fab3 f383 	clz	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	461a      	mov	r2, r3
 8001a68:	2301      	movs	r3, #1
 8001a6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f942 	bl	8000cf4 <HAL_GetTick>
 8001a70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a74:	e00a      	b.n	8001a8c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a76:	f7ff f93d 	bl	8000cf4 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d902      	bls.n	8001a8c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	f000 bde2 	b.w	8002650 <HAL_RCC_OscConfig+0x106c>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001a96:	fa93 f3a3 	rbit	r3, r3
 8001a9a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001a9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	095b      	lsrs	r3, r3, #5
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d102      	bne.n	8001abc <HAL_RCC_OscConfig+0x4d8>
 8001ab6:	4b45      	ldr	r3, [pc, #276]	; (8001bcc <HAL_RCC_OscConfig+0x5e8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	e013      	b.n	8001ae4 <HAL_RCC_OscConfig+0x500>
 8001abc:	2302      	movs	r3, #2
 8001abe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ace:	2302      	movs	r3, #2
 8001ad0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ad4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ad8:	fa93 f3a3 	rbit	r3, r3
 8001adc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001ae0:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <HAL_RCC_OscConfig+0x5e8>)
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001aea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001aee:	fa92 f2a2 	rbit	r2, r2
 8001af2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001af6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001afa:	fab2 f282 	clz	r2, r2
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	f042 0220 	orr.w	r2, r2, #32
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	f002 021f 	and.w	r2, r2, #31
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0af      	beq.n	8001a76 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_RCC_OscConfig+0x5e8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	21f8      	movs	r1, #248	; 0xf8
 8001b2c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b34:	fa91 f1a1 	rbit	r1, r1
 8001b38:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001b3c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001b40:	fab1 f181 	clz	r1, r1
 8001b44:	b2c9      	uxtb	r1, r1
 8001b46:	408b      	lsls	r3, r1
 8001b48:	4920      	ldr	r1, [pc, #128]	; (8001bcc <HAL_RCC_OscConfig+0x5e8>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
 8001b4e:	e06c      	b.n	8001c2a <HAL_RCC_OscConfig+0x646>
 8001b50:	2301      	movs	r3, #1
 8001b52:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001b62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	461a      	mov	r2, r3
 8001b78:	2300      	movs	r3, #0
 8001b7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f8ba 	bl	8000cf4 <HAL_GetTick>
 8001b80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b86:	f7ff f8b5 	bl	8000cf4 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d902      	bls.n	8001b9c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	f000 bd5a 	b.w	8002650 <HAL_RCC_OscConfig+0x106c>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	095b      	lsrs	r3, r3, #5
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d104      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x5ec>
 8001bc6:	4b01      	ldr	r3, [pc, #4]	; (8001bcc <HAL_RCC_OscConfig+0x5e8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	e015      	b.n	8001bf8 <HAL_RCC_OscConfig+0x614>
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001be2:	2302      	movs	r3, #2
 8001be4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001be8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001bf4:	4bc8      	ldr	r3, [pc, #800]	; (8001f18 <HAL_RCC_OscConfig+0x934>)
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001bfe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c02:	fa92 f2a2 	rbit	r2, r2
 8001c06:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001c0a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c0e:	fab2 f282 	clz	r2, r2
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	f042 0220 	orr.w	r2, r2, #32
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	f002 021f 	and.w	r2, r2, #31
 8001c1e:	2101      	movs	r1, #1
 8001c20:	fa01 f202 	lsl.w	r2, r1, r2
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1ad      	bne.n	8001b86 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8110 	beq.w	8001e60 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d079      	beq.n	8001d44 <HAL_RCC_OscConfig+0x760>
 8001c50:	2301      	movs	r3, #1
 8001c52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c66:	fab3 f383 	clz	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4bab      	ldr	r3, [pc, #684]	; (8001f1c <HAL_RCC_OscConfig+0x938>)
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	461a      	mov	r2, r3
 8001c76:	2301      	movs	r3, #1
 8001c78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7a:	f7ff f83b 	bl	8000cf4 <HAL_GetTick>
 8001c7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c84:	f7ff f836 	bl	8000cf4 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d902      	bls.n	8001c9a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	f000 bcdb 	b.w	8002650 <HAL_RCC_OscConfig+0x106c>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	fa93 f2a3 	rbit	r2, r3
 8001cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cd8:	2202      	movs	r2, #2
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	fa93 f2a3 	rbit	r2, r3
 8001cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cf2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf4:	4b88      	ldr	r3, [pc, #544]	; (8001f18 <HAL_RCC_OscConfig+0x934>)
 8001cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d00:	2102      	movs	r1, #2
 8001d02:	6019      	str	r1, [r3, #0]
 8001d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	fa93 f1a3 	rbit	r1, r3
 8001d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d16:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d1a:	6019      	str	r1, [r3, #0]
  return result;
 8001d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d20:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	2101      	movs	r1, #1
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0a0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x6a0>
 8001d42:	e08d      	b.n	8001e60 <HAL_RCC_OscConfig+0x87c>
 8001d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d54:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	fa93 f2a3 	rbit	r2, r3
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d66:	601a      	str	r2, [r3, #0]
  return result;
 8001d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d70:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b68      	ldr	r3, [pc, #416]	; (8001f1c <HAL_RCC_OscConfig+0x938>)
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	461a      	mov	r2, r3
 8001d82:	2300      	movs	r3, #0
 8001d84:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d86:	f7fe ffb5 	bl	8000cf4 <HAL_GetTick>
 8001d8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d90:	f7fe ffb0 	bl	8000cf4 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d902      	bls.n	8001da6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	f000 bc55 	b.w	8002650 <HAL_RCC_OscConfig+0x106c>
 8001da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001daa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001dae:	2202      	movs	r2, #2
 8001db0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	fa93 f2a3 	rbit	r2, r3
 8001dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dda:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	fa93 f2a3 	rbit	r2, r3
 8001de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001df6:	2202      	movs	r2, #2
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	fa93 f2a3 	rbit	r2, r3
 8001e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e10:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e12:	4b41      	ldr	r3, [pc, #260]	; (8001f18 <HAL_RCC_OscConfig+0x934>)
 8001e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e1e:	2102      	movs	r1, #2
 8001e20:	6019      	str	r1, [r3, #0]
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	fa93 f1a3 	rbit	r1, r3
 8001e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e34:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e38:	6019      	str	r1, [r3, #0]
  return result;
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	fab3 f383 	clz	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	2101      	movs	r1, #1
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d197      	bne.n	8001d90 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 81a1 	beq.w	80021b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7c:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <HAL_RCC_OscConfig+0x934>)
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d116      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e88:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <HAL_RCC_OscConfig+0x934>)
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	4a22      	ldr	r2, [pc, #136]	; (8001f18 <HAL_RCC_OscConfig+0x934>)
 8001e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e92:	61d3      	str	r3, [r2, #28]
 8001e94:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <HAL_RCC_OscConfig+0x934>)
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eaa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001eae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <HAL_RCC_OscConfig+0x93c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d11a      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec2:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <HAL_RCC_OscConfig+0x93c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a16      	ldr	r2, [pc, #88]	; (8001f20 <HAL_RCC_OscConfig+0x93c>)
 8001ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ecc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ece:	f7fe ff11 	bl	8000cf4 <HAL_GetTick>
 8001ed2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	e009      	b.n	8001eec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed8:	f7fe ff0c 	bl	8000cf4 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b64      	cmp	r3, #100	; 0x64
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e3b1      	b.n	8002650 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <HAL_RCC_OscConfig+0x93c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0ef      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d10d      	bne.n	8001f24 <HAL_RCC_OscConfig+0x940>
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_RCC_OscConfig+0x934>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a02      	ldr	r2, [pc, #8]	; (8001f18 <HAL_RCC_OscConfig+0x934>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	e03c      	b.n	8001f90 <HAL_RCC_OscConfig+0x9ac>
 8001f16:	bf00      	nop
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	10908120 	.word	0x10908120
 8001f20:	40007000 	.word	0x40007000
 8001f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10c      	bne.n	8001f4e <HAL_RCC_OscConfig+0x96a>
 8001f34:	4bc1      	ldr	r3, [pc, #772]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	4ac0      	ldr	r2, [pc, #768]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 8001f3a:	f023 0301 	bic.w	r3, r3, #1
 8001f3e:	6213      	str	r3, [r2, #32]
 8001f40:	4bbe      	ldr	r3, [pc, #760]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4abd      	ldr	r2, [pc, #756]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 8001f46:	f023 0304 	bic.w	r3, r3, #4
 8001f4a:	6213      	str	r3, [r2, #32]
 8001f4c:	e020      	b.n	8001f90 <HAL_RCC_OscConfig+0x9ac>
 8001f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b05      	cmp	r3, #5
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x994>
 8001f5e:	4bb7      	ldr	r3, [pc, #732]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4ab6      	ldr	r2, [pc, #728]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	4bb4      	ldr	r3, [pc, #720]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4ab3      	ldr	r2, [pc, #716]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6213      	str	r3, [r2, #32]
 8001f76:	e00b      	b.n	8001f90 <HAL_RCC_OscConfig+0x9ac>
 8001f78:	4bb0      	ldr	r3, [pc, #704]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4aaf      	ldr	r2, [pc, #700]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	6213      	str	r3, [r2, #32]
 8001f84:	4bad      	ldr	r3, [pc, #692]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4aac      	ldr	r2, [pc, #688]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 8001f8a:	f023 0304 	bic.w	r3, r3, #4
 8001f8e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 8081 	beq.w	80020a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa2:	f7fe fea7 	bl	8000cf4 <HAL_GetTick>
 8001fa6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001faa:	e00b      	b.n	8001fc4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fac:	f7fe fea2 	bl	8000cf4 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e345      	b.n	8002650 <HAL_RCC_OscConfig+0x106c>
 8001fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001fcc:	2202      	movs	r2, #2
 8001fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	fa93 f2a3 	rbit	r2, r3
 8001fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	fa93 f2a3 	rbit	r2, r3
 8002002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002006:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800200a:	601a      	str	r2, [r3, #0]
  return result;
 800200c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002010:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002014:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	095b      	lsrs	r3, r3, #5
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d102      	bne.n	8002030 <HAL_RCC_OscConfig+0xa4c>
 800202a:	4b84      	ldr	r3, [pc, #528]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	e013      	b.n	8002058 <HAL_RCC_OscConfig+0xa74>
 8002030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002034:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002038:	2202      	movs	r2, #2
 800203a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002040:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	fa93 f2a3 	rbit	r2, r3
 800204a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	4b79      	ldr	r3, [pc, #484]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800205c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002060:	2102      	movs	r1, #2
 8002062:	6011      	str	r1, [r2, #0]
 8002064:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002068:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	fa92 f1a2 	rbit	r1, r2
 8002072:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002076:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800207a:	6011      	str	r1, [r2, #0]
  return result;
 800207c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002080:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	fab2 f282 	clz	r2, r2
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	f002 021f 	and.w	r2, r2, #31
 8002096:	2101      	movs	r1, #1
 8002098:	fa01 f202 	lsl.w	r2, r1, r2
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d084      	beq.n	8001fac <HAL_RCC_OscConfig+0x9c8>
 80020a2:	e07f      	b.n	80021a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a4:	f7fe fe26 	bl	8000cf4 <HAL_GetTick>
 80020a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ac:	e00b      	b.n	80020c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7fe fe21 	bl	8000cf4 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e2c4      	b.n	8002650 <HAL_RCC_OscConfig+0x106c>
 80020c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80020ce:	2202      	movs	r2, #2
 80020d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	fa93 f2a3 	rbit	r2, r3
 80020e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80020f2:	2202      	movs	r2, #2
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	fa93 f2a3 	rbit	r2, r3
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800210c:	601a      	str	r2, [r3, #0]
  return result;
 800210e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002112:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002116:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d102      	bne.n	8002132 <HAL_RCC_OscConfig+0xb4e>
 800212c:	4b43      	ldr	r3, [pc, #268]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	e013      	b.n	800215a <HAL_RCC_OscConfig+0xb76>
 8002132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002136:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800213a:	2202      	movs	r2, #2
 800213c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002142:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	fa93 f2a3 	rbit	r2, r3
 800214c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002150:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	4b39      	ldr	r3, [pc, #228]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800215e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002162:	2102      	movs	r1, #2
 8002164:	6011      	str	r1, [r2, #0]
 8002166:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800216a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	fa92 f1a2 	rbit	r1, r2
 8002174:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002178:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800217c:	6011      	str	r1, [r2, #0]
  return result;
 800217e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002182:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	fab2 f282 	clz	r2, r2
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	f002 021f 	and.w	r2, r2, #31
 8002198:	2101      	movs	r1, #1
 800219a:	fa01 f202 	lsl.w	r2, r1, r2
 800219e:	4013      	ands	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d184      	bne.n	80020ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d105      	bne.n	80021b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ac:	4b23      	ldr	r3, [pc, #140]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	4a22      	ldr	r2, [pc, #136]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 80021b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 8242 	beq.w	800264e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ca:	4b1c      	ldr	r3, [pc, #112]	; (800223c <HAL_RCC_OscConfig+0xc58>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	f000 8213 	beq.w	80025fe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	f040 8162 	bne.w	80024ae <HAL_RCC_OscConfig+0xeca>
 80021ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80021f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	fa93 f2a3 	rbit	r2, r3
 8002206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800220e:	601a      	str	r2, [r3, #0]
  return result;
 8002210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002214:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002218:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002224:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	461a      	mov	r2, r3
 800222c:	2300      	movs	r3, #0
 800222e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe fd60 	bl	8000cf4 <HAL_GetTick>
 8002234:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002238:	e00c      	b.n	8002254 <HAL_RCC_OscConfig+0xc70>
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe fd58 	bl	8000cf4 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e1fd      	b.n	8002650 <HAL_RCC_OscConfig+0x106c>
 8002254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002258:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800225c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002266:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	fa93 f2a3 	rbit	r2, r3
 8002270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002274:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002278:	601a      	str	r2, [r3, #0]
  return result;
 800227a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002282:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d102      	bne.n	800229e <HAL_RCC_OscConfig+0xcba>
 8002298:	4bb0      	ldr	r3, [pc, #704]	; (800255c <HAL_RCC_OscConfig+0xf78>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	e027      	b.n	80022ee <HAL_RCC_OscConfig+0xd0a>
 800229e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	fa93 f2a3 	rbit	r2, r3
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80022cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	fa93 f2a3 	rbit	r2, r3
 80022e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	4b9c      	ldr	r3, [pc, #624]	; (800255c <HAL_RCC_OscConfig+0xf78>)
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022f2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80022f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022fa:	6011      	str	r1, [r2, #0]
 80022fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002300:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	fa92 f1a2 	rbit	r1, r2
 800230a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800230e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002312:	6011      	str	r1, [r2, #0]
  return result;
 8002314:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002318:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	fab2 f282 	clz	r2, r2
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	f042 0220 	orr.w	r2, r2, #32
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	f002 021f 	and.w	r2, r2, #31
 800232e:	2101      	movs	r1, #1
 8002330:	fa01 f202 	lsl.w	r2, r1, r2
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d182      	bne.n	8002240 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800233a:	4b88      	ldr	r3, [pc, #544]	; (800255c <HAL_RCC_OscConfig+0xf78>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002346:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800234e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002352:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	430b      	orrs	r3, r1
 800235c:	497f      	ldr	r1, [pc, #508]	; (800255c <HAL_RCC_OscConfig+0xf78>)
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
 8002362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002366:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800236a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800236e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002374:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	fa93 f2a3 	rbit	r2, r3
 800237e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002382:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002386:	601a      	str	r2, [r3, #0]
  return result;
 8002388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002390:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800239c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	461a      	mov	r2, r3
 80023a4:	2301      	movs	r3, #1
 80023a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7fe fca4 	bl	8000cf4 <HAL_GetTick>
 80023ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b0:	e009      	b.n	80023c6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b2:	f7fe fc9f 	bl	8000cf4 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e144      	b.n	8002650 <HAL_RCC_OscConfig+0x106c>
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80023ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	fa93 f2a3 	rbit	r2, r3
 80023e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023ea:	601a      	str	r2, [r3, #0]
  return result;
 80023ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d102      	bne.n	8002410 <HAL_RCC_OscConfig+0xe2c>
 800240a:	4b54      	ldr	r3, [pc, #336]	; (800255c <HAL_RCC_OscConfig+0xf78>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	e027      	b.n	8002460 <HAL_RCC_OscConfig+0xe7c>
 8002410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002414:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002418:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800241c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002422:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	fa93 f2a3 	rbit	r2, r3
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800243e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	fa93 f2a3 	rbit	r2, r3
 8002452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002456:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	4b3f      	ldr	r3, [pc, #252]	; (800255c <HAL_RCC_OscConfig+0xf78>)
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002464:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002468:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800246c:	6011      	str	r1, [r2, #0]
 800246e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002472:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	fa92 f1a2 	rbit	r1, r2
 800247c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002480:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002484:	6011      	str	r1, [r2, #0]
  return result;
 8002486:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800248a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	fab2 f282 	clz	r2, r2
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	f042 0220 	orr.w	r2, r2, #32
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	f002 021f 	and.w	r2, r2, #31
 80024a0:	2101      	movs	r1, #1
 80024a2:	fa01 f202 	lsl.w	r2, r1, r2
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d082      	beq.n	80023b2 <HAL_RCC_OscConfig+0xdce>
 80024ac:	e0cf      	b.n	800264e <HAL_RCC_OscConfig+0x106a>
 80024ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80024b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	fa93 f2a3 	rbit	r2, r3
 80024ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80024d2:	601a      	str	r2, [r3, #0]
  return result;
 80024d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80024dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	461a      	mov	r2, r3
 80024f0:	2300      	movs	r3, #0
 80024f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7fe fbfe 	bl	8000cf4 <HAL_GetTick>
 80024f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fc:	e009      	b.n	8002512 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fe:	f7fe fbf9 	bl	8000cf4 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e09e      	b.n	8002650 <HAL_RCC_OscConfig+0x106c>
 8002512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002516:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800251a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800251e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002524:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	fa93 f2a3 	rbit	r2, r3
 800252e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002532:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002536:	601a      	str	r2, [r3, #0]
  return result;
 8002538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002540:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	b2db      	uxtb	r3, r3
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d104      	bne.n	8002560 <HAL_RCC_OscConfig+0xf7c>
 8002556:	4b01      	ldr	r3, [pc, #4]	; (800255c <HAL_RCC_OscConfig+0xf78>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	e029      	b.n	80025b0 <HAL_RCC_OscConfig+0xfcc>
 800255c:	40021000 	.word	0x40021000
 8002560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002564:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002568:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800256c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002572:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	fa93 f2a3 	rbit	r2, r3
 800257c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002580:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800258e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002598:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	fa93 f2a3 	rbit	r2, r3
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	4b2b      	ldr	r3, [pc, #172]	; (800265c <HAL_RCC_OscConfig+0x1078>)
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025b4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80025b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025bc:	6011      	str	r1, [r2, #0]
 80025be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025c2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	fa92 f1a2 	rbit	r1, r2
 80025cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025d0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80025d4:	6011      	str	r1, [r2, #0]
  return result;
 80025d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025da:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	fab2 f282 	clz	r2, r2
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f042 0220 	orr.w	r2, r2, #32
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	f002 021f 	and.w	r2, r2, #31
 80025f0:	2101      	movs	r1, #1
 80025f2:	fa01 f202 	lsl.w	r2, r1, r2
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d180      	bne.n	80024fe <HAL_RCC_OscConfig+0xf1a>
 80025fc:	e027      	b.n	800264e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e01e      	b.n	8002650 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_RCC_OscConfig+0x1078>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800261a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800261e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	429a      	cmp	r2, r3
 8002630:	d10b      	bne.n	800264a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002632:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002636:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800263a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002646:	429a      	cmp	r2, r3
 8002648:	d001      	beq.n	800264e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000

08002660 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b09e      	sub	sp, #120	; 0x78
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e162      	b.n	800293e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002678:	4b90      	ldr	r3, [pc, #576]	; (80028bc <HAL_RCC_ClockConfig+0x25c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d910      	bls.n	80026a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002686:	4b8d      	ldr	r3, [pc, #564]	; (80028bc <HAL_RCC_ClockConfig+0x25c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 0207 	bic.w	r2, r3, #7
 800268e:	498b      	ldr	r1, [pc, #556]	; (80028bc <HAL_RCC_ClockConfig+0x25c>)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b89      	ldr	r3, [pc, #548]	; (80028bc <HAL_RCC_ClockConfig+0x25c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e14a      	b.n	800293e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b4:	4b82      	ldr	r3, [pc, #520]	; (80028c0 <HAL_RCC_ClockConfig+0x260>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	497f      	ldr	r1, [pc, #508]	; (80028c0 <HAL_RCC_ClockConfig+0x260>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 80dc 	beq.w	800288c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d13c      	bne.n	8002756 <HAL_RCC_ClockConfig+0xf6>
 80026dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d102      	bne.n	8002706 <HAL_RCC_ClockConfig+0xa6>
 8002700:	4b6f      	ldr	r3, [pc, #444]	; (80028c0 <HAL_RCC_ClockConfig+0x260>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	e00f      	b.n	8002726 <HAL_RCC_ClockConfig+0xc6>
 8002706:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800270a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	667b      	str	r3, [r7, #100]	; 0x64
 8002714:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002718:	663b      	str	r3, [r7, #96]	; 0x60
 800271a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002722:	4b67      	ldr	r3, [pc, #412]	; (80028c0 <HAL_RCC_ClockConfig+0x260>)
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800272a:	65ba      	str	r2, [r7, #88]	; 0x58
 800272c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800272e:	fa92 f2a2 	rbit	r2, r2
 8002732:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002734:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002736:	fab2 f282 	clz	r2, r2
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	f042 0220 	orr.w	r2, r2, #32
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	f002 021f 	and.w	r2, r2, #31
 8002746:	2101      	movs	r1, #1
 8002748:	fa01 f202 	lsl.w	r2, r1, r2
 800274c:	4013      	ands	r3, r2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d17b      	bne.n	800284a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e0f3      	b.n	800293e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d13c      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x178>
 800275e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002762:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800276c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d102      	bne.n	8002788 <HAL_RCC_ClockConfig+0x128>
 8002782:	4b4f      	ldr	r3, [pc, #316]	; (80028c0 <HAL_RCC_ClockConfig+0x260>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	e00f      	b.n	80027a8 <HAL_RCC_ClockConfig+0x148>
 8002788:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800278c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	647b      	str	r3, [r7, #68]	; 0x44
 8002796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800279a:	643b      	str	r3, [r7, #64]	; 0x40
 800279c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027a4:	4b46      	ldr	r3, [pc, #280]	; (80028c0 <HAL_RCC_ClockConfig+0x260>)
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80027ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027b0:	fa92 f2a2 	rbit	r2, r2
 80027b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80027b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027b8:	fab2 f282 	clz	r2, r2
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	f042 0220 	orr.w	r2, r2, #32
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	f002 021f 	and.w	r2, r2, #31
 80027c8:	2101      	movs	r1, #1
 80027ca:	fa01 f202 	lsl.w	r2, r1, r2
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d13a      	bne.n	800284a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0b2      	b.n	800293e <HAL_RCC_ClockConfig+0x2de>
 80027d8:	2302      	movs	r3, #2
 80027da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d102      	bne.n	8002800 <HAL_RCC_ClockConfig+0x1a0>
 80027fa:	4b31      	ldr	r3, [pc, #196]	; (80028c0 <HAL_RCC_ClockConfig+0x260>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	e00d      	b.n	800281c <HAL_RCC_ClockConfig+0x1bc>
 8002800:	2302      	movs	r3, #2
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
 800280c:	2302      	movs	r3, #2
 800280e:	623b      	str	r3, [r7, #32]
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	61fb      	str	r3, [r7, #28]
 8002818:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <HAL_RCC_ClockConfig+0x260>)
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	2202      	movs	r2, #2
 800281e:	61ba      	str	r2, [r7, #24]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	fa92 f2a2 	rbit	r2, r2
 8002826:	617a      	str	r2, [r7, #20]
  return result;
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	fab2 f282 	clz	r2, r2
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	f042 0220 	orr.w	r2, r2, #32
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f002 021f 	and.w	r2, r2, #31
 800283a:	2101      	movs	r1, #1
 800283c:	fa01 f202 	lsl.w	r2, r1, r2
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e079      	b.n	800293e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284a:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_RCC_ClockConfig+0x260>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f023 0203 	bic.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	491a      	ldr	r1, [pc, #104]	; (80028c0 <HAL_RCC_ClockConfig+0x260>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800285c:	f7fe fa4a 	bl	8000cf4 <HAL_GetTick>
 8002860:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	e00a      	b.n	800287a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002864:	f7fe fa46 	bl	8000cf4 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e061      	b.n	800293e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287a:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <HAL_RCC_ClockConfig+0x260>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 020c 	and.w	r2, r3, #12
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	429a      	cmp	r2, r3
 800288a:	d1eb      	bne.n	8002864 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_RCC_ClockConfig+0x25c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d214      	bcs.n	80028c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_RCC_ClockConfig+0x25c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 0207 	bic.w	r2, r3, #7
 80028a2:	4906      	ldr	r1, [pc, #24]	; (80028bc <HAL_RCC_ClockConfig+0x25c>)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028aa:	4b04      	ldr	r3, [pc, #16]	; (80028bc <HAL_RCC_ClockConfig+0x25c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e040      	b.n	800293e <HAL_RCC_ClockConfig+0x2de>
 80028bc:	40022000 	.word	0x40022000
 80028c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <HAL_RCC_ClockConfig+0x2e8>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	491a      	ldr	r1, [pc, #104]	; (8002948 <HAL_RCC_ClockConfig+0x2e8>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ee:	4b16      	ldr	r3, [pc, #88]	; (8002948 <HAL_RCC_ClockConfig+0x2e8>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4912      	ldr	r1, [pc, #72]	; (8002948 <HAL_RCC_ClockConfig+0x2e8>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002902:	f000 f829 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8002906:	4601      	mov	r1, r0
 8002908:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <HAL_RCC_ClockConfig+0x2e8>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002910:	22f0      	movs	r2, #240	; 0xf0
 8002912:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	fa92 f2a2 	rbit	r2, r2
 800291a:	60fa      	str	r2, [r7, #12]
  return result;
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	fab2 f282 	clz	r2, r2
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	40d3      	lsrs	r3, r2
 8002926:	4a09      	ldr	r2, [pc, #36]	; (800294c <HAL_RCC_ClockConfig+0x2ec>)
 8002928:	5cd3      	ldrb	r3, [r2, r3]
 800292a:	fa21 f303 	lsr.w	r3, r1, r3
 800292e:	4a08      	ldr	r2, [pc, #32]	; (8002950 <HAL_RCC_ClockConfig+0x2f0>)
 8002930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002932:	4b08      	ldr	r3, [pc, #32]	; (8002954 <HAL_RCC_ClockConfig+0x2f4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe f8b0 	bl	8000a9c <HAL_InitTick>
  
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3778      	adds	r7, #120	; 0x78
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	080065d0 	.word	0x080065d0
 8002950:	20000000 	.word	0x20000000
 8002954:	20000004 	.word	0x20000004

08002958 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002958:	b480      	push	{r7}
 800295a:	b08b      	sub	sp, #44	; 0x2c
 800295c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	2300      	movs	r3, #0
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002972:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b04      	cmp	r3, #4
 8002980:	d002      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x30>
 8002982:	2b08      	cmp	r3, #8
 8002984:	d003      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0x36>
 8002986:	e03c      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002988:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xc4>)
 800298a:	623b      	str	r3, [r7, #32]
      break;
 800298c:	e03c      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002994:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002998:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	fa92 f2a2 	rbit	r2, r2
 80029a0:	607a      	str	r2, [r7, #4]
  return result;
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	fab2 f282 	clz	r2, r2
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	40d3      	lsrs	r3, r2
 80029ac:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029ae:	5cd3      	ldrb	r3, [r2, r3]
 80029b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80029b2:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	220f      	movs	r2, #15
 80029bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	fa92 f2a2 	rbit	r2, r2
 80029c4:	60fa      	str	r2, [r7, #12]
  return result;
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	fab2 f282 	clz	r2, r2
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	40d3      	lsrs	r3, r2
 80029d0:	4a14      	ldr	r2, [pc, #80]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xcc>)
 80029d2:	5cd3      	ldrb	r3, [r2, r3]
 80029d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029e0:	4a0e      	ldr	r2, [pc, #56]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xc4>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
 80029f0:	e004      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	4a0c      	ldr	r2, [pc, #48]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029f6:	fb02 f303 	mul.w	r3, r2, r3
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	623b      	str	r3, [r7, #32]
      break;
 8002a00:	e002      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a04:	623b      	str	r3, [r7, #32]
      break;
 8002a06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a08:	6a3b      	ldr	r3, [r7, #32]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	372c      	adds	r7, #44	; 0x2c
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	007a1200 	.word	0x007a1200
 8002a20:	080065e8 	.word	0x080065e8
 8002a24:	080065f8 	.word	0x080065f8
 8002a28:	003d0900 	.word	0x003d0900

08002a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000000 	.word	0x20000000

08002a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a4a:	f7ff ffef 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a4e:	4601      	mov	r1, r0
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a58:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	fa92 f2a2 	rbit	r2, r2
 8002a64:	603a      	str	r2, [r7, #0]
  return result;
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	fab2 f282 	clz	r2, r2
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	40d3      	lsrs	r3, r2
 8002a70:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a72:	5cd3      	ldrb	r3, [r2, r3]
 8002a74:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000
 8002a84:	080065e0 	.word	0x080065e0

08002a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a8e:	f7ff ffcd 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a92:	4601      	mov	r1, r0
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a9c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002aa0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	fa92 f2a2 	rbit	r2, r2
 8002aa8:	603a      	str	r2, [r7, #0]
  return result;
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	fab2 f282 	clz	r2, r2
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	40d3      	lsrs	r3, r2
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ab6:	5cd3      	ldrb	r3, [r2, r3]
 8002ab8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	080065e0 	.word	0x080065e0

08002acc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	220f      	movs	r2, #15
 8002ada:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_RCC_GetClockConfig+0x5c>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0203 	and.w	r2, r3, #3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <HAL_RCC_GetClockConfig+0x5c>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <HAL_RCC_GetClockConfig+0x5c>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b00:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_RCC_GetClockConfig+0x5c>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	08db      	lsrs	r3, r3, #3
 8002b06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002b0e:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <HAL_RCC_GetClockConfig+0x60>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0207 	and.w	r2, r3, #7
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	601a      	str	r2, [r3, #0]
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40022000 	.word	0x40022000

08002b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b092      	sub	sp, #72	; 0x48
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 80d4 	beq.w	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b54:	4b4e      	ldr	r3, [pc, #312]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10e      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b60:	4b4b      	ldr	r3, [pc, #300]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	4a4a      	ldr	r2, [pc, #296]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	61d3      	str	r3, [r2, #28]
 8002b6c:	4b48      	ldr	r3, [pc, #288]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7e:	4b45      	ldr	r3, [pc, #276]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d118      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b8a:	4b42      	ldr	r3, [pc, #264]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a41      	ldr	r2, [pc, #260]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b96:	f7fe f8ad 	bl	8000cf4 <HAL_GetTick>
 8002b9a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9e:	f7fe f8a9 	bl	8000cf4 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b64      	cmp	r3, #100	; 0x64
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e169      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb0:	4b38      	ldr	r3, [pc, #224]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bbc:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 8084 	beq.w	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d07c      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bdc:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b26      	ldr	r3, [pc, #152]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	461a      	mov	r2, r3
 8002c06:	2301      	movs	r3, #1
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c2e:	4a18      	ldr	r2, [pc, #96]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c32:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d04b      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7fe f859 	bl	8000cf4 <HAL_GetTick>
 8002c42:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c44:	e00a      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c46:	f7fe f855 	bl	8000cf4 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e113      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
 8002c68:	2302      	movs	r3, #2
 8002c6a:	623b      	str	r3, [r7, #32]
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	61fb      	str	r3, [r7, #28]
  return result;
 8002c74:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d108      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002c8a:	4b01      	ldr	r3, [pc, #4]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	e00d      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40007000 	.word	0x40007000
 8002c98:	10908100 	.word	0x10908100
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	4b78      	ldr	r3, [pc, #480]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	2202      	movs	r2, #2
 8002cae:	613a      	str	r2, [r7, #16]
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	fa92 f2a2 	rbit	r2, r2
 8002cb6:	60fa      	str	r2, [r7, #12]
  return result;
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	fab2 f282 	clz	r2, r2
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	f002 021f 	and.w	r2, r2, #31
 8002cca:	2101      	movs	r1, #1
 8002ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0b7      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002cd6:	4b6d      	ldr	r3, [pc, #436]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	496a      	ldr	r1, [pc, #424]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ce8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d105      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf0:	4b66      	ldr	r3, [pc, #408]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	4a65      	ldr	r2, [pc, #404]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d08:	4b60      	ldr	r3, [pc, #384]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	f023 0203 	bic.w	r2, r3, #3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	495d      	ldr	r1, [pc, #372]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d26:	4b59      	ldr	r3, [pc, #356]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	4956      	ldr	r1, [pc, #344]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d44:	4b51      	ldr	r3, [pc, #324]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	494e      	ldr	r1, [pc, #312]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d008      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d62:	4b4a      	ldr	r3, [pc, #296]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f023 0210 	bic.w	r2, r3, #16
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4947      	ldr	r1, [pc, #284]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d80:	4b42      	ldr	r3, [pc, #264]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	493f      	ldr	r1, [pc, #252]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d008      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d9e:	4b3b      	ldr	r3, [pc, #236]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f023 0220 	bic.w	r2, r3, #32
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	4938      	ldr	r1, [pc, #224]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dbc:	4b33      	ldr	r3, [pc, #204]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	4930      	ldr	r1, [pc, #192]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dda:	4b2c      	ldr	r3, [pc, #176]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	4929      	ldr	r1, [pc, #164]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002df8:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	4921      	ldr	r1, [pc, #132]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e16:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	491a      	ldr	r1, [pc, #104]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002e34:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	4912      	ldr	r1, [pc, #72]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	490b      	ldr	r1, [pc, #44]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7c:	4903      	ldr	r1, [pc, #12]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3748      	adds	r7, #72	; 0x48
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000

08002e90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e09d      	b.n	8002fde <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d108      	bne.n	8002ebc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eb2:	d009      	beq.n	8002ec8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61da      	str	r2, [r3, #28]
 8002eba:	e005      	b.n	8002ec8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd fd10 	bl	8000908 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002efe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f08:	d902      	bls.n	8002f10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	e002      	b.n	8002f16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002f1e:	d007      	beq.n	8002f30 <HAL_SPI_Init+0xa0>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f28:	d002      	beq.n	8002f30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f72:	ea42 0103 	orr.w	r1, r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	0c1b      	lsrs	r3, r3, #16
 8002f8c:	f003 0204 	and.w	r2, r3, #4
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002fac:	ea42 0103 	orr.w	r1, r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e049      	b.n	800308c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f841 	bl	8003094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2202      	movs	r2, #2
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3304      	adds	r3, #4
 8003022:	4619      	mov	r1, r3
 8003024:	4610      	mov	r0, r2
 8003026:	f000 f9f1 	bl	800340c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d001      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e04a      	b.n	8003156 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a21      	ldr	r2, [pc, #132]	; (8003164 <HAL_TIM_Base_Start_IT+0xbc>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d018      	beq.n	8003114 <HAL_TIM_Base_Start_IT+0x6c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ea:	d013      	beq.n	8003114 <HAL_TIM_Base_Start_IT+0x6c>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1d      	ldr	r2, [pc, #116]	; (8003168 <HAL_TIM_Base_Start_IT+0xc0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00e      	beq.n	8003114 <HAL_TIM_Base_Start_IT+0x6c>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1c      	ldr	r2, [pc, #112]	; (800316c <HAL_TIM_Base_Start_IT+0xc4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d009      	beq.n	8003114 <HAL_TIM_Base_Start_IT+0x6c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a1a      	ldr	r2, [pc, #104]	; (8003170 <HAL_TIM_Base_Start_IT+0xc8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d004      	beq.n	8003114 <HAL_TIM_Base_Start_IT+0x6c>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a19      	ldr	r2, [pc, #100]	; (8003174 <HAL_TIM_Base_Start_IT+0xcc>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d115      	bne.n	8003140 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	4b17      	ldr	r3, [pc, #92]	; (8003178 <HAL_TIM_Base_Start_IT+0xd0>)
 800311c:	4013      	ands	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b06      	cmp	r3, #6
 8003124:	d015      	beq.n	8003152 <HAL_TIM_Base_Start_IT+0xaa>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312c:	d011      	beq.n	8003152 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0201 	orr.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313e:	e008      	b.n	8003152 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	e000      	b.n	8003154 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003152:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40012c00 	.word	0x40012c00
 8003168:	40000400 	.word	0x40000400
 800316c:	40000800 	.word	0x40000800
 8003170:	40013400 	.word	0x40013400
 8003174:	40014000 	.word	0x40014000
 8003178:	00010007 	.word	0x00010007

0800317c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b02      	cmp	r3, #2
 8003190:	d122      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b02      	cmp	r3, #2
 800319e:	d11b      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0202 	mvn.w	r2, #2
 80031a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f905 	bl	80033ce <HAL_TIM_IC_CaptureCallback>
 80031c4:	e005      	b.n	80031d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8f7 	bl	80033ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f908 	bl	80033e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d122      	bne.n	800322c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d11b      	bne.n	800322c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0204 	mvn.w	r2, #4
 80031fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2202      	movs	r2, #2
 8003202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f8db 	bl	80033ce <HAL_TIM_IC_CaptureCallback>
 8003218:	e005      	b.n	8003226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f8cd 	bl	80033ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f8de 	bl	80033e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b08      	cmp	r3, #8
 8003238:	d122      	bne.n	8003280 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b08      	cmp	r3, #8
 8003246:	d11b      	bne.n	8003280 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0208 	mvn.w	r2, #8
 8003250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2204      	movs	r2, #4
 8003256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f8b1 	bl	80033ce <HAL_TIM_IC_CaptureCallback>
 800326c:	e005      	b.n	800327a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f8a3 	bl	80033ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f8b4 	bl	80033e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b10      	cmp	r3, #16
 800328c:	d122      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b10      	cmp	r3, #16
 800329a:	d11b      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0210 	mvn.w	r2, #16
 80032a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2208      	movs	r2, #8
 80032aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f887 	bl	80033ce <HAL_TIM_IC_CaptureCallback>
 80032c0:	e005      	b.n	80032ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f879 	bl	80033ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f88a 	bl	80033e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d10e      	bne.n	8003300 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d107      	bne.n	8003300 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0201 	mvn.w	r2, #1
 80032f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fd fa80 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330a:	2b80      	cmp	r3, #128	; 0x80
 800330c:	d10e      	bne.n	800332c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003318:	2b80      	cmp	r3, #128	; 0x80
 800331a:	d107      	bne.n	800332c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f90a 	bl	8003540 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333a:	d10e      	bne.n	800335a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003346:	2b80      	cmp	r3, #128	; 0x80
 8003348:	d107      	bne.n	800335a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f8fd 	bl	8003554 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003364:	2b40      	cmp	r3, #64	; 0x40
 8003366:	d10e      	bne.n	8003386 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b40      	cmp	r3, #64	; 0x40
 8003374:	d107      	bne.n	8003386 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800337e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f838 	bl	80033f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b20      	cmp	r3, #32
 8003392:	d10e      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b20      	cmp	r3, #32
 80033a0:	d107      	bne.n	80033b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f06f 0220 	mvn.w	r2, #32
 80033aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f8bd 	bl	800352c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a3c      	ldr	r2, [pc, #240]	; (8003510 <TIM_Base_SetConfig+0x104>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00f      	beq.n	8003444 <TIM_Base_SetConfig+0x38>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342a:	d00b      	beq.n	8003444 <TIM_Base_SetConfig+0x38>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a39      	ldr	r2, [pc, #228]	; (8003514 <TIM_Base_SetConfig+0x108>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d007      	beq.n	8003444 <TIM_Base_SetConfig+0x38>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a38      	ldr	r2, [pc, #224]	; (8003518 <TIM_Base_SetConfig+0x10c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d003      	beq.n	8003444 <TIM_Base_SetConfig+0x38>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a37      	ldr	r2, [pc, #220]	; (800351c <TIM_Base_SetConfig+0x110>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d108      	bne.n	8003456 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a2d      	ldr	r2, [pc, #180]	; (8003510 <TIM_Base_SetConfig+0x104>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d01b      	beq.n	8003496 <TIM_Base_SetConfig+0x8a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003464:	d017      	beq.n	8003496 <TIM_Base_SetConfig+0x8a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a2a      	ldr	r2, [pc, #168]	; (8003514 <TIM_Base_SetConfig+0x108>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <TIM_Base_SetConfig+0x8a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a29      	ldr	r2, [pc, #164]	; (8003518 <TIM_Base_SetConfig+0x10c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00f      	beq.n	8003496 <TIM_Base_SetConfig+0x8a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a28      	ldr	r2, [pc, #160]	; (800351c <TIM_Base_SetConfig+0x110>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00b      	beq.n	8003496 <TIM_Base_SetConfig+0x8a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a27      	ldr	r2, [pc, #156]	; (8003520 <TIM_Base_SetConfig+0x114>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d007      	beq.n	8003496 <TIM_Base_SetConfig+0x8a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a26      	ldr	r2, [pc, #152]	; (8003524 <TIM_Base_SetConfig+0x118>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d003      	beq.n	8003496 <TIM_Base_SetConfig+0x8a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a25      	ldr	r2, [pc, #148]	; (8003528 <TIM_Base_SetConfig+0x11c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d108      	bne.n	80034a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800349c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a10      	ldr	r2, [pc, #64]	; (8003510 <TIM_Base_SetConfig+0x104>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00f      	beq.n	80034f4 <TIM_Base_SetConfig+0xe8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a11      	ldr	r2, [pc, #68]	; (800351c <TIM_Base_SetConfig+0x110>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00b      	beq.n	80034f4 <TIM_Base_SetConfig+0xe8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a10      	ldr	r2, [pc, #64]	; (8003520 <TIM_Base_SetConfig+0x114>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <TIM_Base_SetConfig+0xe8>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a0f      	ldr	r2, [pc, #60]	; (8003524 <TIM_Base_SetConfig+0x118>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d003      	beq.n	80034f4 <TIM_Base_SetConfig+0xe8>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a0e      	ldr	r2, [pc, #56]	; (8003528 <TIM_Base_SetConfig+0x11c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d103      	bne.n	80034fc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	615a      	str	r2, [r3, #20]
}
 8003502:	bf00      	nop
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40012c00 	.word	0x40012c00
 8003514:	40000400 	.word	0x40000400
 8003518:	40000800 	.word	0x40000800
 800351c:	40013400 	.word	0x40013400
 8003520:	40014000 	.word	0x40014000
 8003524:	40014400 	.word	0x40014400
 8003528:	40014800 	.word	0x40014800

0800352c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e040      	b.n	80035fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fd f9fe 	bl	800098c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2224      	movs	r2, #36	; 0x24
 8003594:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f8b6 	bl	8003718 <UART_SetConfig>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e022      	b.n	80035fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fa7e 	bl	8003ac0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fb05 	bl	8003c04 <UART_CheckIdleState>
 80035fa:	4603      	mov	r3, r0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	; 0x28
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003618:	2b20      	cmp	r3, #32
 800361a:	d178      	bne.n	800370e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_UART_Transmit+0x24>
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e071      	b.n	8003710 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2221      	movs	r2, #33	; 0x21
 8003638:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800363a:	f7fd fb5b 	bl	8000cf4 <HAL_GetTick>
 800363e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	88fa      	ldrh	r2, [r7, #6]
 8003644:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	88fa      	ldrh	r2, [r7, #6]
 800364c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003658:	d108      	bne.n	800366c <HAL_UART_Transmit+0x68>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d104      	bne.n	800366c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	e003      	b.n	8003674 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003670:	2300      	movs	r3, #0
 8003672:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003674:	e030      	b.n	80036d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2200      	movs	r2, #0
 800367e:	2180      	movs	r1, #128	; 0x80
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 fb67 	bl	8003d54 <UART_WaitOnFlagUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d004      	beq.n	8003696 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e03c      	b.n	8003710 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10b      	bne.n	80036b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	881a      	ldrh	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036a8:	b292      	uxth	r2, r2
 80036aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	3302      	adds	r3, #2
 80036b0:	61bb      	str	r3, [r7, #24]
 80036b2:	e008      	b.n	80036c6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	781a      	ldrb	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	b292      	uxth	r2, r2
 80036be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	3301      	adds	r3, #1
 80036c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1c8      	bne.n	8003676 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2200      	movs	r2, #0
 80036ec:	2140      	movs	r1, #64	; 0x40
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fb30 	bl	8003d54 <UART_WaitOnFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d004      	beq.n	8003704 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e005      	b.n	8003710 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	e000      	b.n	8003710 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800370e:	2302      	movs	r3, #2
  }
}
 8003710:	4618      	mov	r0, r3
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003746:	f023 030c 	bic.w	r3, r3, #12
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	6979      	ldr	r1, [r7, #20]
 8003750:	430b      	orrs	r3, r1
 8003752:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	430a      	orrs	r2, r1
 800378c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4aa7      	ldr	r2, [pc, #668]	; (8003a30 <UART_SetConfig+0x318>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d120      	bne.n	80037da <UART_SetConfig+0xc2>
 8003798:	4ba6      	ldr	r3, [pc, #664]	; (8003a34 <UART_SetConfig+0x31c>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d817      	bhi.n	80037d4 <UART_SetConfig+0xbc>
 80037a4:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <UART_SetConfig+0x94>)
 80037a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037aa:	bf00      	nop
 80037ac:	080037bd 	.word	0x080037bd
 80037b0:	080037c9 	.word	0x080037c9
 80037b4:	080037cf 	.word	0x080037cf
 80037b8:	080037c3 	.word	0x080037c3
 80037bc:	2301      	movs	r3, #1
 80037be:	77fb      	strb	r3, [r7, #31]
 80037c0:	e0b5      	b.n	800392e <UART_SetConfig+0x216>
 80037c2:	2302      	movs	r3, #2
 80037c4:	77fb      	strb	r3, [r7, #31]
 80037c6:	e0b2      	b.n	800392e <UART_SetConfig+0x216>
 80037c8:	2304      	movs	r3, #4
 80037ca:	77fb      	strb	r3, [r7, #31]
 80037cc:	e0af      	b.n	800392e <UART_SetConfig+0x216>
 80037ce:	2308      	movs	r3, #8
 80037d0:	77fb      	strb	r3, [r7, #31]
 80037d2:	e0ac      	b.n	800392e <UART_SetConfig+0x216>
 80037d4:	2310      	movs	r3, #16
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e0a9      	b.n	800392e <UART_SetConfig+0x216>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a96      	ldr	r2, [pc, #600]	; (8003a38 <UART_SetConfig+0x320>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d124      	bne.n	800382e <UART_SetConfig+0x116>
 80037e4:	4b93      	ldr	r3, [pc, #588]	; (8003a34 <UART_SetConfig+0x31c>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037f0:	d011      	beq.n	8003816 <UART_SetConfig+0xfe>
 80037f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037f6:	d817      	bhi.n	8003828 <UART_SetConfig+0x110>
 80037f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037fc:	d011      	beq.n	8003822 <UART_SetConfig+0x10a>
 80037fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003802:	d811      	bhi.n	8003828 <UART_SetConfig+0x110>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <UART_SetConfig+0xf8>
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d006      	beq.n	800381c <UART_SetConfig+0x104>
 800380e:	e00b      	b.n	8003828 <UART_SetConfig+0x110>
 8003810:	2300      	movs	r3, #0
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e08b      	b.n	800392e <UART_SetConfig+0x216>
 8003816:	2302      	movs	r3, #2
 8003818:	77fb      	strb	r3, [r7, #31]
 800381a:	e088      	b.n	800392e <UART_SetConfig+0x216>
 800381c:	2304      	movs	r3, #4
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	e085      	b.n	800392e <UART_SetConfig+0x216>
 8003822:	2308      	movs	r3, #8
 8003824:	77fb      	strb	r3, [r7, #31]
 8003826:	e082      	b.n	800392e <UART_SetConfig+0x216>
 8003828:	2310      	movs	r3, #16
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e07f      	b.n	800392e <UART_SetConfig+0x216>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a82      	ldr	r2, [pc, #520]	; (8003a3c <UART_SetConfig+0x324>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d124      	bne.n	8003882 <UART_SetConfig+0x16a>
 8003838:	4b7e      	ldr	r3, [pc, #504]	; (8003a34 <UART_SetConfig+0x31c>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003840:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003844:	d011      	beq.n	800386a <UART_SetConfig+0x152>
 8003846:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800384a:	d817      	bhi.n	800387c <UART_SetConfig+0x164>
 800384c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003850:	d011      	beq.n	8003876 <UART_SetConfig+0x15e>
 8003852:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003856:	d811      	bhi.n	800387c <UART_SetConfig+0x164>
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <UART_SetConfig+0x14c>
 800385c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003860:	d006      	beq.n	8003870 <UART_SetConfig+0x158>
 8003862:	e00b      	b.n	800387c <UART_SetConfig+0x164>
 8003864:	2300      	movs	r3, #0
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	e061      	b.n	800392e <UART_SetConfig+0x216>
 800386a:	2302      	movs	r3, #2
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	e05e      	b.n	800392e <UART_SetConfig+0x216>
 8003870:	2304      	movs	r3, #4
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	e05b      	b.n	800392e <UART_SetConfig+0x216>
 8003876:	2308      	movs	r3, #8
 8003878:	77fb      	strb	r3, [r7, #31]
 800387a:	e058      	b.n	800392e <UART_SetConfig+0x216>
 800387c:	2310      	movs	r3, #16
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e055      	b.n	800392e <UART_SetConfig+0x216>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a6e      	ldr	r2, [pc, #440]	; (8003a40 <UART_SetConfig+0x328>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d124      	bne.n	80038d6 <UART_SetConfig+0x1be>
 800388c:	4b69      	ldr	r3, [pc, #420]	; (8003a34 <UART_SetConfig+0x31c>)
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003894:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003898:	d011      	beq.n	80038be <UART_SetConfig+0x1a6>
 800389a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800389e:	d817      	bhi.n	80038d0 <UART_SetConfig+0x1b8>
 80038a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038a4:	d011      	beq.n	80038ca <UART_SetConfig+0x1b2>
 80038a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038aa:	d811      	bhi.n	80038d0 <UART_SetConfig+0x1b8>
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <UART_SetConfig+0x1a0>
 80038b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b4:	d006      	beq.n	80038c4 <UART_SetConfig+0x1ac>
 80038b6:	e00b      	b.n	80038d0 <UART_SetConfig+0x1b8>
 80038b8:	2300      	movs	r3, #0
 80038ba:	77fb      	strb	r3, [r7, #31]
 80038bc:	e037      	b.n	800392e <UART_SetConfig+0x216>
 80038be:	2302      	movs	r3, #2
 80038c0:	77fb      	strb	r3, [r7, #31]
 80038c2:	e034      	b.n	800392e <UART_SetConfig+0x216>
 80038c4:	2304      	movs	r3, #4
 80038c6:	77fb      	strb	r3, [r7, #31]
 80038c8:	e031      	b.n	800392e <UART_SetConfig+0x216>
 80038ca:	2308      	movs	r3, #8
 80038cc:	77fb      	strb	r3, [r7, #31]
 80038ce:	e02e      	b.n	800392e <UART_SetConfig+0x216>
 80038d0:	2310      	movs	r3, #16
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e02b      	b.n	800392e <UART_SetConfig+0x216>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a5a      	ldr	r2, [pc, #360]	; (8003a44 <UART_SetConfig+0x32c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d124      	bne.n	800392a <UART_SetConfig+0x212>
 80038e0:	4b54      	ldr	r3, [pc, #336]	; (8003a34 <UART_SetConfig+0x31c>)
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80038e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038ec:	d011      	beq.n	8003912 <UART_SetConfig+0x1fa>
 80038ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038f2:	d817      	bhi.n	8003924 <UART_SetConfig+0x20c>
 80038f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038f8:	d011      	beq.n	800391e <UART_SetConfig+0x206>
 80038fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038fe:	d811      	bhi.n	8003924 <UART_SetConfig+0x20c>
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <UART_SetConfig+0x1f4>
 8003904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003908:	d006      	beq.n	8003918 <UART_SetConfig+0x200>
 800390a:	e00b      	b.n	8003924 <UART_SetConfig+0x20c>
 800390c:	2300      	movs	r3, #0
 800390e:	77fb      	strb	r3, [r7, #31]
 8003910:	e00d      	b.n	800392e <UART_SetConfig+0x216>
 8003912:	2302      	movs	r3, #2
 8003914:	77fb      	strb	r3, [r7, #31]
 8003916:	e00a      	b.n	800392e <UART_SetConfig+0x216>
 8003918:	2304      	movs	r3, #4
 800391a:	77fb      	strb	r3, [r7, #31]
 800391c:	e007      	b.n	800392e <UART_SetConfig+0x216>
 800391e:	2308      	movs	r3, #8
 8003920:	77fb      	strb	r3, [r7, #31]
 8003922:	e004      	b.n	800392e <UART_SetConfig+0x216>
 8003924:	2310      	movs	r3, #16
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e001      	b.n	800392e <UART_SetConfig+0x216>
 800392a:	2310      	movs	r3, #16
 800392c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003936:	d15b      	bne.n	80039f0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003938:	7ffb      	ldrb	r3, [r7, #31]
 800393a:	2b08      	cmp	r3, #8
 800393c:	d827      	bhi.n	800398e <UART_SetConfig+0x276>
 800393e:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <UART_SetConfig+0x22c>)
 8003940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003944:	08003969 	.word	0x08003969
 8003948:	08003971 	.word	0x08003971
 800394c:	08003979 	.word	0x08003979
 8003950:	0800398f 	.word	0x0800398f
 8003954:	0800397f 	.word	0x0800397f
 8003958:	0800398f 	.word	0x0800398f
 800395c:	0800398f 	.word	0x0800398f
 8003960:	0800398f 	.word	0x0800398f
 8003964:	08003987 	.word	0x08003987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003968:	f7ff f86c 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 800396c:	61b8      	str	r0, [r7, #24]
        break;
 800396e:	e013      	b.n	8003998 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003970:	f7ff f88a 	bl	8002a88 <HAL_RCC_GetPCLK2Freq>
 8003974:	61b8      	str	r0, [r7, #24]
        break;
 8003976:	e00f      	b.n	8003998 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003978:	4b33      	ldr	r3, [pc, #204]	; (8003a48 <UART_SetConfig+0x330>)
 800397a:	61bb      	str	r3, [r7, #24]
        break;
 800397c:	e00c      	b.n	8003998 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397e:	f7fe ffeb 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8003982:	61b8      	str	r0, [r7, #24]
        break;
 8003984:	e008      	b.n	8003998 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800398a:	61bb      	str	r3, [r7, #24]
        break;
 800398c:	e004      	b.n	8003998 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	77bb      	strb	r3, [r7, #30]
        break;
 8003996:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 8082 	beq.w	8003aa4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	005a      	lsls	r2, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	085b      	lsrs	r3, r3, #1
 80039aa:	441a      	add	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b0f      	cmp	r3, #15
 80039ba:	d916      	bls.n	80039ea <UART_SetConfig+0x2d2>
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c2:	d212      	bcs.n	80039ea <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	f023 030f 	bic.w	r3, r3, #15
 80039cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	b29a      	uxth	r2, r3
 80039da:	89fb      	ldrh	r3, [r7, #14]
 80039dc:	4313      	orrs	r3, r2
 80039de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	89fa      	ldrh	r2, [r7, #14]
 80039e6:	60da      	str	r2, [r3, #12]
 80039e8:	e05c      	b.n	8003aa4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	77bb      	strb	r3, [r7, #30]
 80039ee:	e059      	b.n	8003aa4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039f0:	7ffb      	ldrb	r3, [r7, #31]
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d835      	bhi.n	8003a62 <UART_SetConfig+0x34a>
 80039f6:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <UART_SetConfig+0x2e4>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003a21 	.word	0x08003a21
 8003a00:	08003a29 	.word	0x08003a29
 8003a04:	08003a4d 	.word	0x08003a4d
 8003a08:	08003a63 	.word	0x08003a63
 8003a0c:	08003a53 	.word	0x08003a53
 8003a10:	08003a63 	.word	0x08003a63
 8003a14:	08003a63 	.word	0x08003a63
 8003a18:	08003a63 	.word	0x08003a63
 8003a1c:	08003a5b 	.word	0x08003a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a20:	f7ff f810 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 8003a24:	61b8      	str	r0, [r7, #24]
        break;
 8003a26:	e021      	b.n	8003a6c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a28:	f7ff f82e 	bl	8002a88 <HAL_RCC_GetPCLK2Freq>
 8003a2c:	61b8      	str	r0, [r7, #24]
        break;
 8003a2e:	e01d      	b.n	8003a6c <UART_SetConfig+0x354>
 8003a30:	40013800 	.word	0x40013800
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40004400 	.word	0x40004400
 8003a3c:	40004800 	.word	0x40004800
 8003a40:	40004c00 	.word	0x40004c00
 8003a44:	40005000 	.word	0x40005000
 8003a48:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a4c:	4b1b      	ldr	r3, [pc, #108]	; (8003abc <UART_SetConfig+0x3a4>)
 8003a4e:	61bb      	str	r3, [r7, #24]
        break;
 8003a50:	e00c      	b.n	8003a6c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a52:	f7fe ff81 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8003a56:	61b8      	str	r0, [r7, #24]
        break;
 8003a58:	e008      	b.n	8003a6c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a5e:	61bb      	str	r3, [r7, #24]
        break;
 8003a60:	e004      	b.n	8003a6c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	77bb      	strb	r3, [r7, #30]
        break;
 8003a6a:	bf00      	nop
    }

    if (pclk != 0U)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d018      	beq.n	8003aa4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	085a      	lsrs	r2, r3, #1
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	441a      	add	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b0f      	cmp	r3, #15
 8003a8a:	d909      	bls.n	8003aa0 <UART_SetConfig+0x388>
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a92:	d205      	bcs.n	8003aa0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60da      	str	r2, [r3, #12]
 8003a9e:	e001      	b.n	8003aa4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ab0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3720      	adds	r7, #32
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	007a1200 	.word	0x007a1200

08003ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01a      	beq.n	8003bd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bbe:	d10a      	bne.n	8003bd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	605a      	str	r2, [r3, #4]
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b098      	sub	sp, #96	; 0x60
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c14:	f7fd f86e 	bl	8000cf4 <HAL_GetTick>
 8003c18:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d12e      	bne.n	8003c86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c30:	2200      	movs	r2, #0
 8003c32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f88c 	bl	8003d54 <UART_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d021      	beq.n	8003c86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4a:	e853 3f00 	ldrex	r3, [r3]
 8003c4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c56:	653b      	str	r3, [r7, #80]	; 0x50
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c60:	647b      	str	r3, [r7, #68]	; 0x44
 8003c62:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c68:	e841 2300 	strex	r3, r2, [r1]
 8003c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1e6      	bne.n	8003c42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e062      	b.n	8003d4c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d149      	bne.n	8003d28 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f856 	bl	8003d54 <UART_WaitOnFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d03c      	beq.n	8003d28 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	623b      	str	r3, [r7, #32]
   return(result);
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ccc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cd4:	e841 2300 	strex	r3, r2, [r1]
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e6      	bne.n	8003cae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	e853 3f00 	ldrex	r3, [r3]
 8003cee:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3308      	adds	r3, #8
 8003cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d00:	61fa      	str	r2, [r7, #28]
 8003d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	69b9      	ldr	r1, [r7, #24]
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e5      	bne.n	8003ce0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e011      	b.n	8003d4c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3758      	adds	r7, #88	; 0x58
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	4613      	mov	r3, r2
 8003d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d64:	e049      	b.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6c:	d045      	beq.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d6e:	f7fc ffc1 	bl	8000cf4 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d302      	bcc.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e048      	b.n	8003e1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d031      	beq.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d110      	bne.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2208      	movs	r2, #8
 8003daa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f838 	bl	8003e22 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2208      	movs	r2, #8
 8003db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e029      	b.n	8003e1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd4:	d111      	bne.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f81e 	bl	8003e22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e00f      	b.n	8003e1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4013      	ands	r3, r2
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d0a6      	beq.n	8003d66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b095      	sub	sp, #84	; 0x54
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e48:	643b      	str	r3, [r7, #64]	; 0x40
 8003e4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e6      	bne.n	8003e2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3308      	adds	r3, #8
 8003e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3308      	adds	r3, #8
 8003e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e5      	bne.n	8003e5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d118      	bne.n	8003eca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	e853 3f00 	ldrex	r3, [r3]
 8003ea4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f023 0310 	bic.w	r3, r3, #16
 8003eac:	647b      	str	r3, [r7, #68]	; 0x44
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	6979      	ldr	r1, [r7, #20]
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	e841 2300 	strex	r3, r2, [r1]
 8003ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1e6      	bne.n	8003e98 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ede:	bf00      	nop
 8003ee0:	3754      	adds	r7, #84	; 0x54
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ef2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ef6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	4013      	ands	r3, r2
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f20:	b084      	sub	sp, #16
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	f107 0014 	add.w	r0, r7, #20
 8003f2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	b004      	add	sp, #16
 8003f60:	4770      	bx	lr

08003f62 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	4603      	mov	r3, r0
 8003f6a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003f70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f74:	2b84      	cmp	r3, #132	; 0x84
 8003f76:	d005      	beq.n	8003f84 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003f78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4413      	add	r3, r2
 8003f80:	3303      	adds	r3, #3
 8003f82:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003f84:	68fb      	ldr	r3, [r7, #12]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f98:	f3ef 8305 	mrs	r3, IPSR
 8003f9c:	607b      	str	r3, [r7, #4]
  return(result);
 8003f9e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf14      	ite	ne
 8003fa4:	2301      	movne	r3, #1
 8003fa6:	2300      	moveq	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003fba:	f000 fdf9 	bl	8004bb0 <vTaskStartScheduler>
  
  return osOK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8003fc8:	f7ff ffe3 	bl	8003f92 <inHandlerMode>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003fd2:	f000 ff11 	bl	8004df8 <xTaskGetTickCountFromISR>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	e002      	b.n	8003fe0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003fda:	f000 fefd 	bl	8004dd8 <xTaskGetTickCount>
 8003fde:	4603      	mov	r3, r0
  }
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fe6:	b089      	sub	sp, #36	; 0x24
 8003fe8:	af04      	add	r7, sp, #16
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d020      	beq.n	8004038 <osThreadCreate+0x54>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d01c      	beq.n	8004038 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685c      	ldr	r4, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691e      	ldr	r6, [r3, #16]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff ffa6 	bl	8003f62 <makeFreeRtosPriority>
 8004016:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004020:	9202      	str	r2, [sp, #8]
 8004022:	9301      	str	r3, [sp, #4]
 8004024:	9100      	str	r1, [sp, #0]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	4632      	mov	r2, r6
 800402a:	4629      	mov	r1, r5
 800402c:	4620      	mov	r0, r4
 800402e:	f000 f93d 	bl	80042ac <xTaskCreateStatic>
 8004032:	4603      	mov	r3, r0
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	e01c      	b.n	8004072 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685c      	ldr	r4, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004044:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff ff88 	bl	8003f62 <makeFreeRtosPriority>
 8004052:	4602      	mov	r2, r0
 8004054:	f107 030c 	add.w	r3, r7, #12
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	9200      	str	r2, [sp, #0]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	4632      	mov	r2, r6
 8004060:	4629      	mov	r1, r5
 8004062:	4620      	mov	r0, r4
 8004064:	f000 f97e 	bl	8004364 <xTaskCreate>
 8004068:	4603      	mov	r3, r0
 800406a:	2b01      	cmp	r3, #1
 800406c:	d001      	beq.n	8004072 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800406e:	2300      	movs	r3, #0
 8004070:	e000      	b.n	8004074 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004072:	68fb      	ldr	r3, [r7, #12]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800407c <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fab3 	bl	80045f0 <vTaskDelete>
  return osOK;
 800408a:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <osDelay+0x16>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	e000      	b.n	80040ac <osDelay+0x18>
 80040aa:	2301      	movs	r3, #1
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fbad 	bl	800480c <vTaskDelay>
  
  return osOK;
 80040b2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fbd5 	bl	8004874 <vTaskSuspend>
  
  return osOK;
 80040ca:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80040dc:	f7ff ff59 	bl	8003f92 <inHandlerMode>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00e      	beq.n	8004104 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fcf0 	bl	8004acc <xTaskResumeFromISR>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d10b      	bne.n	800410a <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 80040f2:	4b08      	ldr	r3, [pc, #32]	; (8004114 <osThreadResume+0x40>)
 80040f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	e002      	b.n	800410a <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fc83 	bl	8004a10 <vTaskResume>
  }
  return osOK;
 800410a:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	e000ed04 	.word	0xe000ed04

08004118 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <osDelayUntil+0x18>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	e000      	b.n	8004132 <osDelayUntil+0x1a>
 8004130:	2301      	movs	r3, #1
 8004132:	4619      	mov	r1, r3
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 faeb 	bl	8004710 <vTaskDelayUntil>
  
  return osOK;
 800413a:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f103 0208 	add.w	r2, r3, #8
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f04f 32ff 	mov.w	r2, #4294967295
 800415c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f103 0208 	add.w	r2, r3, #8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f103 0208 	add.w	r2, r3, #8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800419e:	b480      	push	{r7}
 80041a0:	b085      	sub	sp, #20
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	601a      	str	r2, [r3, #0]
}
 80041da:	bf00      	nop
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041e6:	b480      	push	{r7}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fc:	d103      	bne.n	8004206 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e00c      	b.n	8004220 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3308      	adds	r3, #8
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	e002      	b.n	8004214 <vListInsert+0x2e>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	429a      	cmp	r2, r3
 800421e:	d2f6      	bcs.n	800420e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	601a      	str	r2, [r3, #0]
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6892      	ldr	r2, [r2, #8]
 800426e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6852      	ldr	r2, [r2, #4]
 8004278:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	429a      	cmp	r2, r3
 8004282:	d103      	bne.n	800428c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	1e5a      	subs	r2, r3, #1
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08e      	sub	sp, #56	; 0x38
 80042b0:	af04      	add	r7, sp, #16
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10a      	bne.n	80042d6 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80042d2:	bf00      	nop
 80042d4:	e7fe      	b.n	80042d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	61fb      	str	r3, [r7, #28]
}
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042f2:	23a0      	movs	r3, #160	; 0xa0
 80042f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2ba0      	cmp	r3, #160	; 0xa0
 80042fa:	d00a      	beq.n	8004312 <xTaskCreateStatic+0x66>
	__asm volatile
 80042fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004300:	f383 8811 	msr	BASEPRI, r3
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	61bb      	str	r3, [r7, #24]
}
 800430e:	bf00      	nop
 8004310:	e7fe      	b.n	8004310 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004314:	2b00      	cmp	r3, #0
 8004316:	d01e      	beq.n	8004356 <xTaskCreateStatic+0xaa>
 8004318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01b      	beq.n	8004356 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004326:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	2202      	movs	r2, #2
 800432c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004330:	2300      	movs	r3, #0
 8004332:	9303      	str	r3, [sp, #12]
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	9302      	str	r3, [sp, #8]
 8004338:	f107 0314 	add.w	r3, r7, #20
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	68b9      	ldr	r1, [r7, #8]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f851 	bl	80043f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800434e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004350:	f000 f8e4 	bl	800451c <prvAddNewTaskToReadyList>
 8004354:	e001      	b.n	800435a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800435a:	697b      	ldr	r3, [r7, #20]
	}
 800435c:	4618      	mov	r0, r3
 800435e:	3728      	adds	r7, #40	; 0x28
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004364:	b580      	push	{r7, lr}
 8004366:	b08c      	sub	sp, #48	; 0x30
 8004368:	af04      	add	r7, sp, #16
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	603b      	str	r3, [r7, #0]
 8004370:	4613      	mov	r3, r2
 8004372:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4618      	mov	r0, r3
 800437a:	f001 fa05 	bl	8005788 <pvPortMalloc>
 800437e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00e      	beq.n	80043a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004386:	20a0      	movs	r0, #160	; 0xa0
 8004388:	f001 f9fe 	bl	8005788 <pvPortMalloc>
 800438c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	631a      	str	r2, [r3, #48]	; 0x30
 800439a:	e005      	b.n	80043a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800439c:	6978      	ldr	r0, [r7, #20]
 800439e:	f001 fab7 	bl	8005910 <vPortFree>
 80043a2:	e001      	b.n	80043a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d017      	beq.n	80043de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043b6:	88fa      	ldrh	r2, [r7, #6]
 80043b8:	2300      	movs	r3, #0
 80043ba:	9303      	str	r3, [sp, #12]
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	9302      	str	r3, [sp, #8]
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	9301      	str	r3, [sp, #4]
 80043c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f80f 	bl	80043f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043d2:	69f8      	ldr	r0, [r7, #28]
 80043d4:	f000 f8a2 	bl	800451c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043d8:	2301      	movs	r3, #1
 80043da:	61bb      	str	r3, [r7, #24]
 80043dc:	e002      	b.n	80043e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043de:	f04f 33ff 	mov.w	r3, #4294967295
 80043e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043e4:	69bb      	ldr	r3, [r7, #24]
	}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3720      	adds	r7, #32
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004408:	3b01      	subs	r3, #1
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	f023 0307 	bic.w	r3, r3, #7
 8004416:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	617b      	str	r3, [r7, #20]
}
 8004434:	bf00      	nop
 8004436:	e7fe      	b.n	8004436 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004438:	2300      	movs	r3, #0
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	e012      	b.n	8004464 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	4413      	add	r3, r2
 8004444:	7819      	ldrb	r1, [r3, #0]
 8004446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	4413      	add	r3, r2
 800444c:	3334      	adds	r3, #52	; 0x34
 800444e:	460a      	mov	r2, r1
 8004450:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	4413      	add	r3, r2
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d006      	beq.n	800446c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	3301      	adds	r3, #1
 8004462:	61fb      	str	r3, [r7, #28]
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	2b0f      	cmp	r3, #15
 8004468:	d9e9      	bls.n	800443e <prvInitialiseNewTask+0x4e>
 800446a:	e000      	b.n	800446e <prvInitialiseNewTask+0x7e>
		{
			break;
 800446c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	2b06      	cmp	r3, #6
 800447a:	d901      	bls.n	8004480 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800447c:	2306      	movs	r3, #6
 800447e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004484:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800448a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800448c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448e:	2200      	movs	r2, #0
 8004490:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004494:	3304      	adds	r3, #4
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff fe74 	bl	8004184 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800449c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449e:	3318      	adds	r3, #24
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff fe6f 	bl	8004184 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	f1c3 0207 	rsb	r2, r3, #7
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	2200      	movs	r2, #0
 80044c0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	334c      	adds	r3, #76	; 0x4c
 80044d0:	224c      	movs	r2, #76	; 0x4c
 80044d2:	2100      	movs	r1, #0
 80044d4:	4618      	mov	r0, r3
 80044d6:	f001 fb51 	bl	8005b7c <memset>
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	4a0c      	ldr	r2, [pc, #48]	; (8004510 <prvInitialiseNewTask+0x120>)
 80044de:	651a      	str	r2, [r3, #80]	; 0x50
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	4a0c      	ldr	r2, [pc, #48]	; (8004514 <prvInitialiseNewTask+0x124>)
 80044e4:	655a      	str	r2, [r3, #84]	; 0x54
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	4a0b      	ldr	r2, [pc, #44]	; (8004518 <prvInitialiseNewTask+0x128>)
 80044ea:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	68f9      	ldr	r1, [r7, #12]
 80044f0:	69b8      	ldr	r0, [r7, #24]
 80044f2:	f000 fef9 	bl	80052e8 <pxPortInitialiseStack>
 80044f6:	4602      	mov	r2, r0
 80044f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004506:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004508:	bf00      	nop
 800450a:	3720      	adds	r7, #32
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	200014f8 	.word	0x200014f8
 8004514:	20001560 	.word	0x20001560
 8004518:	200015c8 	.word	0x200015c8

0800451c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004524:	f001 f80e 	bl	8005544 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004528:	4b2a      	ldr	r3, [pc, #168]	; (80045d4 <prvAddNewTaskToReadyList+0xb8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	4a29      	ldr	r2, [pc, #164]	; (80045d4 <prvAddNewTaskToReadyList+0xb8>)
 8004530:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004532:	4b29      	ldr	r3, [pc, #164]	; (80045d8 <prvAddNewTaskToReadyList+0xbc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d109      	bne.n	800454e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800453a:	4a27      	ldr	r2, [pc, #156]	; (80045d8 <prvAddNewTaskToReadyList+0xbc>)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004540:	4b24      	ldr	r3, [pc, #144]	; (80045d4 <prvAddNewTaskToReadyList+0xb8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d110      	bne.n	800456a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004548:	f000 fda0 	bl	800508c <prvInitialiseTaskLists>
 800454c:	e00d      	b.n	800456a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800454e:	4b23      	ldr	r3, [pc, #140]	; (80045dc <prvAddNewTaskToReadyList+0xc0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d109      	bne.n	800456a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004556:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <prvAddNewTaskToReadyList+0xbc>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	429a      	cmp	r2, r3
 8004562:	d802      	bhi.n	800456a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004564:	4a1c      	ldr	r2, [pc, #112]	; (80045d8 <prvAddNewTaskToReadyList+0xbc>)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800456a:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <prvAddNewTaskToReadyList+0xc4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3301      	adds	r3, #1
 8004570:	4a1b      	ldr	r2, [pc, #108]	; (80045e0 <prvAddNewTaskToReadyList+0xc4>)
 8004572:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	2201      	movs	r2, #1
 800457a:	409a      	lsls	r2, r3
 800457c:	4b19      	ldr	r3, [pc, #100]	; (80045e4 <prvAddNewTaskToReadyList+0xc8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4313      	orrs	r3, r2
 8004582:	4a18      	ldr	r2, [pc, #96]	; (80045e4 <prvAddNewTaskToReadyList+0xc8>)
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458a:	4613      	mov	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <prvAddNewTaskToReadyList+0xcc>)
 8004594:	441a      	add	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3304      	adds	r3, #4
 800459a:	4619      	mov	r1, r3
 800459c:	4610      	mov	r0, r2
 800459e:	f7ff fdfe 	bl	800419e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045a2:	f000 ffff 	bl	80055a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045a6:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <prvAddNewTaskToReadyList+0xc0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00e      	beq.n	80045cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045ae:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <prvAddNewTaskToReadyList+0xbc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d207      	bcs.n	80045cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045bc:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <prvAddNewTaskToReadyList+0xd0>)
 80045be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045cc:	bf00      	nop
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	200008ac 	.word	0x200008ac
 80045d8:	200007ac 	.word	0x200007ac
 80045dc:	200008b8 	.word	0x200008b8
 80045e0:	200008c8 	.word	0x200008c8
 80045e4:	200008b4 	.word	0x200008b4
 80045e8:	200007b0 	.word	0x200007b0
 80045ec:	e000ed04 	.word	0xe000ed04

080045f0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80045f8:	f000 ffa4 	bl	8005544 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d102      	bne.n	8004608 <vTaskDelete+0x18>
 8004602:	4b39      	ldr	r3, [pc, #228]	; (80046e8 <vTaskDelete+0xf8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	e000      	b.n	800460a <vTaskDelete+0x1a>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3304      	adds	r3, #4
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff fe21 	bl	8004258 <uxListRemove>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d115      	bne.n	8004648 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004620:	4932      	ldr	r1, [pc, #200]	; (80046ec <vTaskDelete+0xfc>)
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <vTaskDelete+0x58>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	2201      	movs	r2, #1
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	43da      	mvns	r2, r3
 800463e:	4b2c      	ldr	r3, [pc, #176]	; (80046f0 <vTaskDelete+0x100>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4013      	ands	r3, r2
 8004644:	4a2a      	ldr	r2, [pc, #168]	; (80046f0 <vTaskDelete+0x100>)
 8004646:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464c:	2b00      	cmp	r3, #0
 800464e:	d004      	beq.n	800465a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	3318      	adds	r3, #24
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff fdff 	bl	8004258 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800465a:	4b26      	ldr	r3, [pc, #152]	; (80046f4 <vTaskDelete+0x104>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3301      	adds	r3, #1
 8004660:	4a24      	ldr	r2, [pc, #144]	; (80046f4 <vTaskDelete+0x104>)
 8004662:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004664:	4b20      	ldr	r3, [pc, #128]	; (80046e8 <vTaskDelete+0xf8>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	429a      	cmp	r2, r3
 800466c:	d10b      	bne.n	8004686 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3304      	adds	r3, #4
 8004672:	4619      	mov	r1, r3
 8004674:	4820      	ldr	r0, [pc, #128]	; (80046f8 <vTaskDelete+0x108>)
 8004676:	f7ff fd92 	bl	800419e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800467a:	4b20      	ldr	r3, [pc, #128]	; (80046fc <vTaskDelete+0x10c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3301      	adds	r3, #1
 8004680:	4a1e      	ldr	r2, [pc, #120]	; (80046fc <vTaskDelete+0x10c>)
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	e009      	b.n	800469a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004686:	4b1e      	ldr	r3, [pc, #120]	; (8004700 <vTaskDelete+0x110>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3b01      	subs	r3, #1
 800468c:	4a1c      	ldr	r2, [pc, #112]	; (8004700 <vTaskDelete+0x110>)
 800468e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 fd69 	bl	8005168 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004696:	f000 fd9b 	bl	80051d0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800469a:	f000 ff83 	bl	80055a4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800469e:	4b19      	ldr	r3, [pc, #100]	; (8004704 <vTaskDelete+0x114>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d01b      	beq.n	80046de <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <vTaskDelete+0xf8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d116      	bne.n	80046de <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80046b0:	4b15      	ldr	r3, [pc, #84]	; (8004708 <vTaskDelete+0x118>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <vTaskDelete+0xde>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	60bb      	str	r3, [r7, #8]
}
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80046ce:	4b0f      	ldr	r3, [pc, #60]	; (800470c <vTaskDelete+0x11c>)
 80046d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80046de:	bf00      	nop
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	200007ac 	.word	0x200007ac
 80046ec:	200007b0 	.word	0x200007b0
 80046f0:	200008b4 	.word	0x200008b4
 80046f4:	200008c8 	.word	0x200008c8
 80046f8:	20000880 	.word	0x20000880
 80046fc:	20000894 	.word	0x20000894
 8004700:	200008ac 	.word	0x200008ac
 8004704:	200008b8 	.word	0x200008b8
 8004708:	200008d4 	.word	0x200008d4
 800470c:	e000ed04 	.word	0xe000ed04

08004710 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08a      	sub	sp, #40	; 0x28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800471a:	2300      	movs	r3, #0
 800471c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10a      	bne.n	800473a <vTaskDelayUntil+0x2a>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	617b      	str	r3, [r7, #20]
}
 8004736:	bf00      	nop
 8004738:	e7fe      	b.n	8004738 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <vTaskDelayUntil+0x46>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	613b      	str	r3, [r7, #16]
}
 8004752:	bf00      	nop
 8004754:	e7fe      	b.n	8004754 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004756:	4b2a      	ldr	r3, [pc, #168]	; (8004800 <vTaskDelayUntil+0xf0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <vTaskDelayUntil+0x64>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	60fb      	str	r3, [r7, #12]
}
 8004770:	bf00      	nop
 8004772:	e7fe      	b.n	8004772 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004774:	f000 fa86 	bl	8004c84 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004778:	4b22      	ldr	r3, [pc, #136]	; (8004804 <vTaskDelayUntil+0xf4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	4413      	add	r3, r2
 8004786:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6a3a      	ldr	r2, [r7, #32]
 800478e:	429a      	cmp	r2, r3
 8004790:	d20b      	bcs.n	80047aa <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69fa      	ldr	r2, [r7, #28]
 8004798:	429a      	cmp	r2, r3
 800479a:	d211      	bcs.n	80047c0 <vTaskDelayUntil+0xb0>
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d90d      	bls.n	80047c0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80047a4:	2301      	movs	r3, #1
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
 80047a8:	e00a      	b.n	80047c0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d303      	bcc.n	80047bc <vTaskDelayUntil+0xac>
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d901      	bls.n	80047c0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80047bc:	2301      	movs	r3, #1
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d006      	beq.n	80047da <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80047cc:	69fa      	ldr	r2, [r7, #28]
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2100      	movs	r1, #0
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fd21 	bl	800521c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80047da:	f000 fa61 	bl	8004ca0 <xTaskResumeAll>
 80047de:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d107      	bne.n	80047f6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80047e6:	4b08      	ldr	r3, [pc, #32]	; (8004808 <vTaskDelayUntil+0xf8>)
 80047e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047f6:	bf00      	nop
 80047f8:	3728      	adds	r7, #40	; 0x28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	200008d4 	.word	0x200008d4
 8004804:	200008b0 	.word	0x200008b0
 8004808:	e000ed04 	.word	0xe000ed04

0800480c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004814:	2300      	movs	r3, #0
 8004816:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d017      	beq.n	800484e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800481e:	4b13      	ldr	r3, [pc, #76]	; (800486c <vTaskDelay+0x60>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <vTaskDelay+0x30>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	60bb      	str	r3, [r7, #8]
}
 8004838:	bf00      	nop
 800483a:	e7fe      	b.n	800483a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800483c:	f000 fa22 	bl	8004c84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004840:	2100      	movs	r1, #0
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fcea 	bl	800521c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004848:	f000 fa2a 	bl	8004ca0 <xTaskResumeAll>
 800484c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d107      	bne.n	8004864 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004854:	4b06      	ldr	r3, [pc, #24]	; (8004870 <vTaskDelay+0x64>)
 8004856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004864:	bf00      	nop
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	200008d4 	.word	0x200008d4
 8004870:	e000ed04 	.word	0xe000ed04

08004874 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800487c:	f000 fe62 	bl	8005544 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d102      	bne.n	800488c <vTaskSuspend+0x18>
 8004886:	4b3c      	ldr	r3, [pc, #240]	; (8004978 <vTaskSuspend+0x104>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	e000      	b.n	800488e <vTaskSuspend+0x1a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3304      	adds	r3, #4
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff fcdf 	bl	8004258 <uxListRemove>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d115      	bne.n	80048cc <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a4:	4935      	ldr	r1, [pc, #212]	; (800497c <vTaskSuspend+0x108>)
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	440b      	add	r3, r1
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10a      	bne.n	80048cc <vTaskSuspend+0x58>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	2201      	movs	r2, #1
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	43da      	mvns	r2, r3
 80048c2:	4b2f      	ldr	r3, [pc, #188]	; (8004980 <vTaskSuspend+0x10c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4013      	ands	r3, r2
 80048c8:	4a2d      	ldr	r2, [pc, #180]	; (8004980 <vTaskSuspend+0x10c>)
 80048ca:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d004      	beq.n	80048de <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3318      	adds	r3, #24
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff fcbd 	bl	8004258 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3304      	adds	r3, #4
 80048e2:	4619      	mov	r1, r3
 80048e4:	4827      	ldr	r0, [pc, #156]	; (8004984 <vTaskSuspend+0x110>)
 80048e6:	f7ff fc5a 	bl	800419e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d103      	bne.n	80048fe <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80048fe:	f000 fe51 	bl	80055a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004902:	4b21      	ldr	r3, [pc, #132]	; (8004988 <vTaskSuspend+0x114>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800490a:	f000 fe1b 	bl	8005544 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800490e:	f000 fc5f 	bl	80051d0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004912:	f000 fe47 	bl	80055a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004916:	4b18      	ldr	r3, [pc, #96]	; (8004978 <vTaskSuspend+0x104>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	429a      	cmp	r2, r3
 800491e:	d127      	bne.n	8004970 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8004920:	4b19      	ldr	r3, [pc, #100]	; (8004988 <vTaskSuspend+0x114>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d017      	beq.n	8004958 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004928:	4b18      	ldr	r3, [pc, #96]	; (800498c <vTaskSuspend+0x118>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <vTaskSuspend+0xd2>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	60bb      	str	r3, [r7, #8]
}
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8004946:	4b12      	ldr	r3, [pc, #72]	; (8004990 <vTaskSuspend+0x11c>)
 8004948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004956:	e00b      	b.n	8004970 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8004958:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <vTaskSuspend+0x110>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	4b0d      	ldr	r3, [pc, #52]	; (8004994 <vTaskSuspend+0x120>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d103      	bne.n	800496c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8004964:	4b04      	ldr	r3, [pc, #16]	; (8004978 <vTaskSuspend+0x104>)
 8004966:	2200      	movs	r2, #0
 8004968:	601a      	str	r2, [r3, #0]
	}
 800496a:	e001      	b.n	8004970 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800496c:	f000 fb14 	bl	8004f98 <vTaskSwitchContext>
	}
 8004970:	bf00      	nop
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	200007ac 	.word	0x200007ac
 800497c:	200007b0 	.word	0x200007b0
 8004980:	200008b4 	.word	0x200008b4
 8004984:	20000898 	.word	0x20000898
 8004988:	200008b8 	.word	0x200008b8
 800498c:	200008d4 	.word	0x200008d4
 8004990:	e000ed04 	.word	0xe000ed04
 8004994:	200008ac 	.word	0x200008ac

08004998 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80049a0:	2300      	movs	r3, #0
 80049a2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10a      	bne.n	80049c4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	60fb      	str	r3, [r7, #12]
}
 80049c0:	bf00      	nop
 80049c2:	e7fe      	b.n	80049c2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	4a0f      	ldr	r2, [pc, #60]	; (8004a08 <prvTaskIsTaskSuspended+0x70>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d101      	bne.n	80049d2 <prvTaskIsTaskSuspended+0x3a>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <prvTaskIsTaskSuspended+0x3c>
 80049d2:	2300      	movs	r3, #0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00f      	beq.n	80049f8 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049dc:	4a0b      	ldr	r2, [pc, #44]	; (8004a0c <prvTaskIsTaskSuspended+0x74>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00a      	beq.n	80049f8 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <prvTaskIsTaskSuspended+0x56>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <prvTaskIsTaskSuspended+0x58>
 80049ee:	2300      	movs	r3, #0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 80049f4:	2301      	movs	r3, #1
 80049f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049f8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80049fa:	4618      	mov	r0, r3
 80049fc:	371c      	adds	r7, #28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	20000898 	.word	0x20000898
 8004a0c:	2000086c 	.word	0x2000086c

08004a10 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10a      	bne.n	8004a38 <vTaskResume+0x28>
	__asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	60bb      	str	r3, [r7, #8]
}
 8004a34:	bf00      	nop
 8004a36:	e7fe      	b.n	8004a36 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d039      	beq.n	8004ab2 <vTaskResume+0xa2>
 8004a3e:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <vTaskResume+0xac>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d034      	beq.n	8004ab2 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8004a48:	f000 fd7c 	bl	8005544 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f7ff ffa3 	bl	8004998 <prvTaskIsTaskSuspended>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d02a      	beq.n	8004aae <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff fbfb 	bl	8004258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	2201      	movs	r2, #1
 8004a68:	409a      	lsls	r2, r3
 8004a6a:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <vTaskResume+0xb0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	4a13      	ldr	r2, [pc, #76]	; (8004ac0 <vTaskResume+0xb0>)
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4a10      	ldr	r2, [pc, #64]	; (8004ac4 <vTaskResume+0xb4>)
 8004a82:	441a      	add	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	f7ff fb87 	bl	800419e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a94:	4b09      	ldr	r3, [pc, #36]	; (8004abc <vTaskResume+0xac>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d307      	bcc.n	8004aae <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8004a9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <vTaskResume+0xb8>)
 8004aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8004aae:	f000 fd79 	bl	80055a4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	200007ac 	.word	0x200007ac
 8004ac0:	200008b4 	.word	0x200008b4
 8004ac4:	200007b0 	.word	0x200007b0
 8004ac8:	e000ed04 	.word	0xe000ed04

08004acc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08a      	sub	sp, #40	; 0x28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10a      	bne.n	8004af8 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	61bb      	str	r3, [r7, #24]
}
 8004af4:	bf00      	nop
 8004af6:	e7fe      	b.n	8004af6 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004af8:	f000 fe06 	bl	8005708 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004afc:	f3ef 8211 	mrs	r2, BASEPRI
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	617a      	str	r2, [r7, #20]
 8004b12:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b14:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b16:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004b18:	6a38      	ldr	r0, [r7, #32]
 8004b1a:	f7ff ff3d 	bl	8004998 <prvTaskIsTaskSuspended>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d02f      	beq.n	8004b84 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b24:	4b1d      	ldr	r3, [pc, #116]	; (8004b9c <xTaskResumeFromISR+0xd0>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d125      	bne.n	8004b78 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b30:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <xTaskResumeFromISR+0xd4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d301      	bcc.n	8004b3e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	3304      	adds	r3, #4
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff fb88 	bl	8004258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	409a      	lsls	r2, r3
 8004b50:	4b14      	ldr	r3, [pc, #80]	; (8004ba4 <xTaskResumeFromISR+0xd8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <xTaskResumeFromISR+0xd8>)
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5e:	4613      	mov	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4a10      	ldr	r2, [pc, #64]	; (8004ba8 <xTaskResumeFromISR+0xdc>)
 8004b68:	441a      	add	r2, r3
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f7ff fb14 	bl	800419e <vListInsertEnd>
 8004b76:	e005      	b.n	8004b84 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	3318      	adds	r3, #24
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	480b      	ldr	r0, [pc, #44]	; (8004bac <xTaskResumeFromISR+0xe0>)
 8004b80:	f7ff fb0d 	bl	800419e <vListInsertEnd>
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b8e:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3728      	adds	r7, #40	; 0x28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	200008d4 	.word	0x200008d4
 8004ba0:	200007ac 	.word	0x200007ac
 8004ba4:	200008b4 	.word	0x200008b4
 8004ba8:	200007b0 	.word	0x200007b0
 8004bac:	2000086c 	.word	0x2000086c

08004bb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	; 0x28
 8004bb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bbe:	463a      	mov	r2, r7
 8004bc0:	1d39      	adds	r1, r7, #4
 8004bc2:	f107 0308 	add.w	r3, r7, #8
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fb fb5a 	bl	8000280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bcc:	6839      	ldr	r1, [r7, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	9202      	str	r2, [sp, #8]
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	460a      	mov	r2, r1
 8004bde:	4921      	ldr	r1, [pc, #132]	; (8004c64 <vTaskStartScheduler+0xb4>)
 8004be0:	4821      	ldr	r0, [pc, #132]	; (8004c68 <vTaskStartScheduler+0xb8>)
 8004be2:	f7ff fb63 	bl	80042ac <xTaskCreateStatic>
 8004be6:	4603      	mov	r3, r0
 8004be8:	4a20      	ldr	r2, [pc, #128]	; (8004c6c <vTaskStartScheduler+0xbc>)
 8004bea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bec:	4b1f      	ldr	r3, [pc, #124]	; (8004c6c <vTaskStartScheduler+0xbc>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	e001      	b.n	8004bfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d11b      	bne.n	8004c3c <vTaskStartScheduler+0x8c>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	613b      	str	r3, [r7, #16]
}
 8004c16:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c18:	4b15      	ldr	r3, [pc, #84]	; (8004c70 <vTaskStartScheduler+0xc0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	334c      	adds	r3, #76	; 0x4c
 8004c1e:	4a15      	ldr	r2, [pc, #84]	; (8004c74 <vTaskStartScheduler+0xc4>)
 8004c20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c22:	4b15      	ldr	r3, [pc, #84]	; (8004c78 <vTaskStartScheduler+0xc8>)
 8004c24:	f04f 32ff 	mov.w	r2, #4294967295
 8004c28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c2a:	4b14      	ldr	r3, [pc, #80]	; (8004c7c <vTaskStartScheduler+0xcc>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004c30:	4b13      	ldr	r3, [pc, #76]	; (8004c80 <vTaskStartScheduler+0xd0>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c36:	f000 fbe3 	bl	8005400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c3a:	e00e      	b.n	8004c5a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c42:	d10a      	bne.n	8004c5a <vTaskStartScheduler+0xaa>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	60fb      	str	r3, [r7, #12]
}
 8004c56:	bf00      	nop
 8004c58:	e7fe      	b.n	8004c58 <vTaskStartScheduler+0xa8>
}
 8004c5a:	bf00      	nop
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	080065c8 	.word	0x080065c8
 8004c68:	0800505d 	.word	0x0800505d
 8004c6c:	200008d0 	.word	0x200008d0
 8004c70:	200007ac 	.word	0x200007ac
 8004c74:	2000005c 	.word	0x2000005c
 8004c78:	200008cc 	.word	0x200008cc
 8004c7c:	200008b8 	.word	0x200008b8
 8004c80:	200008b0 	.word	0x200008b0

08004c84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004c88:	4b04      	ldr	r3, [pc, #16]	; (8004c9c <vTaskSuspendAll+0x18>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	4a03      	ldr	r2, [pc, #12]	; (8004c9c <vTaskSuspendAll+0x18>)
 8004c90:	6013      	str	r3, [r2, #0]
}
 8004c92:	bf00      	nop
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	200008d4 	.word	0x200008d4

08004ca0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cae:	4b41      	ldr	r3, [pc, #260]	; (8004db4 <xTaskResumeAll+0x114>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <xTaskResumeAll+0x2c>
	__asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	603b      	str	r3, [r7, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	e7fe      	b.n	8004cca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ccc:	f000 fc3a 	bl	8005544 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cd0:	4b38      	ldr	r3, [pc, #224]	; (8004db4 <xTaskResumeAll+0x114>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	4a37      	ldr	r2, [pc, #220]	; (8004db4 <xTaskResumeAll+0x114>)
 8004cd8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cda:	4b36      	ldr	r3, [pc, #216]	; (8004db4 <xTaskResumeAll+0x114>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d161      	bne.n	8004da6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ce2:	4b35      	ldr	r3, [pc, #212]	; (8004db8 <xTaskResumeAll+0x118>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d05d      	beq.n	8004da6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cea:	e02e      	b.n	8004d4a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004cec:	4b33      	ldr	r3, [pc, #204]	; (8004dbc <xTaskResumeAll+0x11c>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3318      	adds	r3, #24
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff faad 	bl	8004258 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3304      	adds	r3, #4
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff faa8 	bl	8004258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	409a      	lsls	r2, r3
 8004d10:	4b2b      	ldr	r3, [pc, #172]	; (8004dc0 <xTaskResumeAll+0x120>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	4a2a      	ldr	r2, [pc, #168]	; (8004dc0 <xTaskResumeAll+0x120>)
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1e:	4613      	mov	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4a27      	ldr	r2, [pc, #156]	; (8004dc4 <xTaskResumeAll+0x124>)
 8004d28:	441a      	add	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4610      	mov	r0, r2
 8004d32:	f7ff fa34 	bl	800419e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3a:	4b23      	ldr	r3, [pc, #140]	; (8004dc8 <xTaskResumeAll+0x128>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d302      	bcc.n	8004d4a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004d44:	4b21      	ldr	r3, [pc, #132]	; (8004dcc <xTaskResumeAll+0x12c>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d4a:	4b1c      	ldr	r3, [pc, #112]	; (8004dbc <xTaskResumeAll+0x11c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1cc      	bne.n	8004cec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d58:	f000 fa3a 	bl	80051d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004d5c:	4b1c      	ldr	r3, [pc, #112]	; (8004dd0 <xTaskResumeAll+0x130>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d010      	beq.n	8004d8a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d68:	f000 f858 	bl	8004e1c <xTaskIncrementTick>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004d72:	4b16      	ldr	r3, [pc, #88]	; (8004dcc <xTaskResumeAll+0x12c>)
 8004d74:	2201      	movs	r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f1      	bne.n	8004d68 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004d84:	4b12      	ldr	r3, [pc, #72]	; (8004dd0 <xTaskResumeAll+0x130>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d8a:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <xTaskResumeAll+0x12c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d009      	beq.n	8004da6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d92:	2301      	movs	r3, #1
 8004d94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d96:	4b0f      	ldr	r3, [pc, #60]	; (8004dd4 <xTaskResumeAll+0x134>)
 8004d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004da6:	f000 fbfd 	bl	80055a4 <vPortExitCritical>

	return xAlreadyYielded;
 8004daa:	68bb      	ldr	r3, [r7, #8]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	200008d4 	.word	0x200008d4
 8004db8:	200008ac 	.word	0x200008ac
 8004dbc:	2000086c 	.word	0x2000086c
 8004dc0:	200008b4 	.word	0x200008b4
 8004dc4:	200007b0 	.word	0x200007b0
 8004dc8:	200007ac 	.word	0x200007ac
 8004dcc:	200008c0 	.word	0x200008c0
 8004dd0:	200008bc 	.word	0x200008bc
 8004dd4:	e000ed04 	.word	0xe000ed04

08004dd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004dde:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <xTaskGetTickCount+0x1c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004de4:	687b      	ldr	r3, [r7, #4]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	200008b0 	.word	0x200008b0

08004df8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dfe:	f000 fc83 	bl	8005708 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004e02:	2300      	movs	r3, #0
 8004e04:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004e06:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <xTaskGetTickCountFromISR+0x20>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e0c:	683b      	ldr	r3, [r7, #0]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	200008b0 	.word	0x200008b0

08004e1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e26:	4b51      	ldr	r3, [pc, #324]	; (8004f6c <xTaskIncrementTick+0x150>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f040 808d 	bne.w	8004f4a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e30:	4b4f      	ldr	r3, [pc, #316]	; (8004f70 <xTaskIncrementTick+0x154>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3301      	adds	r3, #1
 8004e36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e38:	4a4d      	ldr	r2, [pc, #308]	; (8004f70 <xTaskIncrementTick+0x154>)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d120      	bne.n	8004e86 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e44:	4b4b      	ldr	r3, [pc, #300]	; (8004f74 <xTaskIncrementTick+0x158>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	603b      	str	r3, [r7, #0]
}
 8004e60:	bf00      	nop
 8004e62:	e7fe      	b.n	8004e62 <xTaskIncrementTick+0x46>
 8004e64:	4b43      	ldr	r3, [pc, #268]	; (8004f74 <xTaskIncrementTick+0x158>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	4b43      	ldr	r3, [pc, #268]	; (8004f78 <xTaskIncrementTick+0x15c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a41      	ldr	r2, [pc, #260]	; (8004f74 <xTaskIncrementTick+0x158>)
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	4a41      	ldr	r2, [pc, #260]	; (8004f78 <xTaskIncrementTick+0x15c>)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	4b40      	ldr	r3, [pc, #256]	; (8004f7c <xTaskIncrementTick+0x160>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	4a3f      	ldr	r2, [pc, #252]	; (8004f7c <xTaskIncrementTick+0x160>)
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	f000 f9a5 	bl	80051d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e86:	4b3e      	ldr	r3, [pc, #248]	; (8004f80 <xTaskIncrementTick+0x164>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d34d      	bcc.n	8004f2c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e90:	4b38      	ldr	r3, [pc, #224]	; (8004f74 <xTaskIncrementTick+0x158>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <xTaskIncrementTick+0x82>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <xTaskIncrementTick+0x84>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d004      	beq.n	8004eae <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ea4:	4b36      	ldr	r3, [pc, #216]	; (8004f80 <xTaskIncrementTick+0x164>)
 8004ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eaa:	601a      	str	r2, [r3, #0]
					break;
 8004eac:	e03e      	b.n	8004f2c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004eae:	4b31      	ldr	r3, [pc, #196]	; (8004f74 <xTaskIncrementTick+0x158>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d203      	bcs.n	8004ece <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ec6:	4a2e      	ldr	r2, [pc, #184]	; (8004f80 <xTaskIncrementTick+0x164>)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6013      	str	r3, [r2, #0]
						break;
 8004ecc:	e02e      	b.n	8004f2c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff f9c0 	bl	8004258 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d004      	beq.n	8004eea <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	3318      	adds	r3, #24
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff f9b7 	bl	8004258 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	2201      	movs	r2, #1
 8004ef0:	409a      	lsls	r2, r3
 8004ef2:	4b24      	ldr	r3, [pc, #144]	; (8004f84 <xTaskIncrementTick+0x168>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	4a22      	ldr	r2, [pc, #136]	; (8004f84 <xTaskIncrementTick+0x168>)
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4a1f      	ldr	r2, [pc, #124]	; (8004f88 <xTaskIncrementTick+0x16c>)
 8004f0a:	441a      	add	r2, r3
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	4619      	mov	r1, r3
 8004f12:	4610      	mov	r0, r2
 8004f14:	f7ff f943 	bl	800419e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1c:	4b1b      	ldr	r3, [pc, #108]	; (8004f8c <xTaskIncrementTick+0x170>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d3b4      	bcc.n	8004e90 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f26:	2301      	movs	r3, #1
 8004f28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f2a:	e7b1      	b.n	8004e90 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f2c:	4b17      	ldr	r3, [pc, #92]	; (8004f8c <xTaskIncrementTick+0x170>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f32:	4915      	ldr	r1, [pc, #84]	; (8004f88 <xTaskIncrementTick+0x16c>)
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d907      	bls.n	8004f54 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004f44:	2301      	movs	r3, #1
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	e004      	b.n	8004f54 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004f4a:	4b11      	ldr	r3, [pc, #68]	; (8004f90 <xTaskIncrementTick+0x174>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	4a0f      	ldr	r2, [pc, #60]	; (8004f90 <xTaskIncrementTick+0x174>)
 8004f52:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004f54:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <xTaskIncrementTick+0x178>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004f60:	697b      	ldr	r3, [r7, #20]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	200008d4 	.word	0x200008d4
 8004f70:	200008b0 	.word	0x200008b0
 8004f74:	20000864 	.word	0x20000864
 8004f78:	20000868 	.word	0x20000868
 8004f7c:	200008c4 	.word	0x200008c4
 8004f80:	200008cc 	.word	0x200008cc
 8004f84:	200008b4 	.word	0x200008b4
 8004f88:	200007b0 	.word	0x200007b0
 8004f8c:	200007ac 	.word	0x200007ac
 8004f90:	200008bc 	.word	0x200008bc
 8004f94:	200008c0 	.word	0x200008c0

08004f98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f9e:	4b29      	ldr	r3, [pc, #164]	; (8005044 <vTaskSwitchContext+0xac>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004fa6:	4b28      	ldr	r3, [pc, #160]	; (8005048 <vTaskSwitchContext+0xb0>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fac:	e044      	b.n	8005038 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004fae:	4b26      	ldr	r3, [pc, #152]	; (8005048 <vTaskSwitchContext+0xb0>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004fb4:	4b25      	ldr	r3, [pc, #148]	; (800504c <vTaskSwitchContext+0xb4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	fab3 f383 	clz	r3, r3
 8004fc0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004fc2:	7afb      	ldrb	r3, [r7, #11]
 8004fc4:	f1c3 031f 	rsb	r3, r3, #31
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	4921      	ldr	r1, [pc, #132]	; (8005050 <vTaskSwitchContext+0xb8>)
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	607b      	str	r3, [r7, #4]
}
 8004ff0:	bf00      	nop
 8004ff2:	e7fe      	b.n	8004ff2 <vTaskSwitchContext+0x5a>
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4a14      	ldr	r2, [pc, #80]	; (8005050 <vTaskSwitchContext+0xb8>)
 8005000:	4413      	add	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	605a      	str	r2, [r3, #4]
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	3308      	adds	r3, #8
 8005016:	429a      	cmp	r2, r3
 8005018:	d104      	bne.n	8005024 <vTaskSwitchContext+0x8c>
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	605a      	str	r2, [r3, #4]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	4a0a      	ldr	r2, [pc, #40]	; (8005054 <vTaskSwitchContext+0xbc>)
 800502c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800502e:	4b09      	ldr	r3, [pc, #36]	; (8005054 <vTaskSwitchContext+0xbc>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	334c      	adds	r3, #76	; 0x4c
 8005034:	4a08      	ldr	r2, [pc, #32]	; (8005058 <vTaskSwitchContext+0xc0>)
 8005036:	6013      	str	r3, [r2, #0]
}
 8005038:	bf00      	nop
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	200008d4 	.word	0x200008d4
 8005048:	200008c0 	.word	0x200008c0
 800504c:	200008b4 	.word	0x200008b4
 8005050:	200007b0 	.word	0x200007b0
 8005054:	200007ac 	.word	0x200007ac
 8005058:	2000005c 	.word	0x2000005c

0800505c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005064:	f000 f852 	bl	800510c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005068:	4b06      	ldr	r3, [pc, #24]	; (8005084 <prvIdleTask+0x28>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d9f9      	bls.n	8005064 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005070:	4b05      	ldr	r3, [pc, #20]	; (8005088 <prvIdleTask+0x2c>)
 8005072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005080:	e7f0      	b.n	8005064 <prvIdleTask+0x8>
 8005082:	bf00      	nop
 8005084:	200007b0 	.word	0x200007b0
 8005088:	e000ed04 	.word	0xe000ed04

0800508c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005092:	2300      	movs	r3, #0
 8005094:	607b      	str	r3, [r7, #4]
 8005096:	e00c      	b.n	80050b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4a12      	ldr	r2, [pc, #72]	; (80050ec <prvInitialiseTaskLists+0x60>)
 80050a4:	4413      	add	r3, r2
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff f84c 	bl	8004144 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3301      	adds	r3, #1
 80050b0:	607b      	str	r3, [r7, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b06      	cmp	r3, #6
 80050b6:	d9ef      	bls.n	8005098 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050b8:	480d      	ldr	r0, [pc, #52]	; (80050f0 <prvInitialiseTaskLists+0x64>)
 80050ba:	f7ff f843 	bl	8004144 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050be:	480d      	ldr	r0, [pc, #52]	; (80050f4 <prvInitialiseTaskLists+0x68>)
 80050c0:	f7ff f840 	bl	8004144 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050c4:	480c      	ldr	r0, [pc, #48]	; (80050f8 <prvInitialiseTaskLists+0x6c>)
 80050c6:	f7ff f83d 	bl	8004144 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050ca:	480c      	ldr	r0, [pc, #48]	; (80050fc <prvInitialiseTaskLists+0x70>)
 80050cc:	f7ff f83a 	bl	8004144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050d0:	480b      	ldr	r0, [pc, #44]	; (8005100 <prvInitialiseTaskLists+0x74>)
 80050d2:	f7ff f837 	bl	8004144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050d6:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <prvInitialiseTaskLists+0x78>)
 80050d8:	4a05      	ldr	r2, [pc, #20]	; (80050f0 <prvInitialiseTaskLists+0x64>)
 80050da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050dc:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <prvInitialiseTaskLists+0x7c>)
 80050de:	4a05      	ldr	r2, [pc, #20]	; (80050f4 <prvInitialiseTaskLists+0x68>)
 80050e0:	601a      	str	r2, [r3, #0]
}
 80050e2:	bf00      	nop
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	200007b0 	.word	0x200007b0
 80050f0:	2000083c 	.word	0x2000083c
 80050f4:	20000850 	.word	0x20000850
 80050f8:	2000086c 	.word	0x2000086c
 80050fc:	20000880 	.word	0x20000880
 8005100:	20000898 	.word	0x20000898
 8005104:	20000864 	.word	0x20000864
 8005108:	20000868 	.word	0x20000868

0800510c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005112:	e019      	b.n	8005148 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005114:	f000 fa16 	bl	8005544 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005118:	4b10      	ldr	r3, [pc, #64]	; (800515c <prvCheckTasksWaitingTermination+0x50>)
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3304      	adds	r3, #4
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff f897 	bl	8004258 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800512a:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <prvCheckTasksWaitingTermination+0x54>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3b01      	subs	r3, #1
 8005130:	4a0b      	ldr	r2, [pc, #44]	; (8005160 <prvCheckTasksWaitingTermination+0x54>)
 8005132:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005134:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <prvCheckTasksWaitingTermination+0x58>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3b01      	subs	r3, #1
 800513a:	4a0a      	ldr	r2, [pc, #40]	; (8005164 <prvCheckTasksWaitingTermination+0x58>)
 800513c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800513e:	f000 fa31 	bl	80055a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f810 	bl	8005168 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005148:	4b06      	ldr	r3, [pc, #24]	; (8005164 <prvCheckTasksWaitingTermination+0x58>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1e1      	bne.n	8005114 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005150:	bf00      	nop
 8005152:	bf00      	nop
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000880 	.word	0x20000880
 8005160:	200008ac 	.word	0x200008ac
 8005164:	20000894 	.word	0x20000894

08005168 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	334c      	adds	r3, #76	; 0x4c
 8005174:	4618      	mov	r0, r3
 8005176:	f000 fd09 	bl	8005b8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005180:	2b00      	cmp	r3, #0
 8005182:	d108      	bne.n	8005196 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fbc1 	bl	8005910 <vPortFree>
				vPortFree( pxTCB );
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fbbe 	bl	8005910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005194:	e018      	b.n	80051c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800519c:	2b01      	cmp	r3, #1
 800519e:	d103      	bne.n	80051a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fbb5 	bl	8005910 <vPortFree>
	}
 80051a6:	e00f      	b.n	80051c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d00a      	beq.n	80051c8 <prvDeleteTCB+0x60>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	60fb      	str	r3, [r7, #12]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <prvDeleteTCB+0x5e>
	}
 80051c8:	bf00      	nop
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051d6:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <prvResetNextTaskUnblockTime+0x44>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <prvResetNextTaskUnblockTime+0x14>
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <prvResetNextTaskUnblockTime+0x16>
 80051e4:	2300      	movs	r3, #0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d004      	beq.n	80051f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051ea:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <prvResetNextTaskUnblockTime+0x48>)
 80051ec:	f04f 32ff 	mov.w	r2, #4294967295
 80051f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051f2:	e008      	b.n	8005206 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80051f4:	4b07      	ldr	r3, [pc, #28]	; (8005214 <prvResetNextTaskUnblockTime+0x44>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	4a05      	ldr	r2, [pc, #20]	; (8005218 <prvResetNextTaskUnblockTime+0x48>)
 8005204:	6013      	str	r3, [r2, #0]
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	20000864 	.word	0x20000864
 8005218:	200008cc 	.word	0x200008cc

0800521c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005226:	4b29      	ldr	r3, [pc, #164]	; (80052cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800522c:	4b28      	ldr	r3, [pc, #160]	; (80052d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3304      	adds	r3, #4
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff f810 	bl	8004258 <uxListRemove>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10b      	bne.n	8005256 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800523e:	4b24      	ldr	r3, [pc, #144]	; (80052d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	2201      	movs	r2, #1
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	43da      	mvns	r2, r3
 800524c:	4b21      	ldr	r3, [pc, #132]	; (80052d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4013      	ands	r3, r2
 8005252:	4a20      	ldr	r2, [pc, #128]	; (80052d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005254:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d10a      	bne.n	8005274 <prvAddCurrentTaskToDelayedList+0x58>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d007      	beq.n	8005274 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005264:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3304      	adds	r3, #4
 800526a:	4619      	mov	r1, r3
 800526c:	481a      	ldr	r0, [pc, #104]	; (80052d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800526e:	f7fe ff96 	bl	800419e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005272:	e026      	b.n	80052c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4413      	add	r3, r2
 800527a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800527c:	4b14      	ldr	r3, [pc, #80]	; (80052d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	429a      	cmp	r2, r3
 800528a:	d209      	bcs.n	80052a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800528c:	4b13      	ldr	r3, [pc, #76]	; (80052dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3304      	adds	r3, #4
 8005296:	4619      	mov	r1, r3
 8005298:	4610      	mov	r0, r2
 800529a:	f7fe ffa4 	bl	80041e6 <vListInsert>
}
 800529e:	e010      	b.n	80052c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052a0:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3304      	adds	r3, #4
 80052aa:	4619      	mov	r1, r3
 80052ac:	4610      	mov	r0, r2
 80052ae:	f7fe ff9a 	bl	80041e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052b2:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d202      	bcs.n	80052c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80052bc:	4a09      	ldr	r2, [pc, #36]	; (80052e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	6013      	str	r3, [r2, #0]
}
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	200008b0 	.word	0x200008b0
 80052d0:	200007ac 	.word	0x200007ac
 80052d4:	200008b4 	.word	0x200008b4
 80052d8:	20000898 	.word	0x20000898
 80052dc:	20000868 	.word	0x20000868
 80052e0:	20000864 	.word	0x20000864
 80052e4:	200008cc 	.word	0x200008cc

080052e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3b04      	subs	r3, #4
 80052f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005300:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3b04      	subs	r3, #4
 8005306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f023 0201 	bic.w	r2, r3, #1
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3b04      	subs	r3, #4
 8005316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005318:	4a0c      	ldr	r2, [pc, #48]	; (800534c <pxPortInitialiseStack+0x64>)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3b14      	subs	r3, #20
 8005322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3b04      	subs	r3, #4
 800532e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f06f 0202 	mvn.w	r2, #2
 8005336:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3b20      	subs	r3, #32
 800533c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800533e:	68fb      	ldr	r3, [r7, #12]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	08005351 	.word	0x08005351

08005350 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800535a:	4b12      	ldr	r3, [pc, #72]	; (80053a4 <prvTaskExitError+0x54>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005362:	d00a      	beq.n	800537a <prvTaskExitError+0x2a>
	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	60fb      	str	r3, [r7, #12]
}
 8005376:	bf00      	nop
 8005378:	e7fe      	b.n	8005378 <prvTaskExitError+0x28>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	60bb      	str	r3, [r7, #8]
}
 800538c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800538e:	bf00      	nop
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0fc      	beq.n	8005390 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005396:	bf00      	nop
 8005398:	bf00      	nop
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	2000000c 	.word	0x2000000c
	...

080053b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053b0:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <pxCurrentTCBConst2>)
 80053b2:	6819      	ldr	r1, [r3, #0]
 80053b4:	6808      	ldr	r0, [r1, #0]
 80053b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ba:	f380 8809 	msr	PSP, r0
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f04f 0000 	mov.w	r0, #0
 80053c6:	f380 8811 	msr	BASEPRI, r0
 80053ca:	4770      	bx	lr
 80053cc:	f3af 8000 	nop.w

080053d0 <pxCurrentTCBConst2>:
 80053d0:	200007ac 	.word	0x200007ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop

080053d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053d8:	4808      	ldr	r0, [pc, #32]	; (80053fc <prvPortStartFirstTask+0x24>)
 80053da:	6800      	ldr	r0, [r0, #0]
 80053dc:	6800      	ldr	r0, [r0, #0]
 80053de:	f380 8808 	msr	MSP, r0
 80053e2:	f04f 0000 	mov.w	r0, #0
 80053e6:	f380 8814 	msr	CONTROL, r0
 80053ea:	b662      	cpsie	i
 80053ec:	b661      	cpsie	f
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	df00      	svc	0
 80053f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053fa:	bf00      	nop
 80053fc:	e000ed08 	.word	0xe000ed08

08005400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005406:	4b46      	ldr	r3, [pc, #280]	; (8005520 <xPortStartScheduler+0x120>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a46      	ldr	r2, [pc, #280]	; (8005524 <xPortStartScheduler+0x124>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d10a      	bne.n	8005426 <xPortStartScheduler+0x26>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	613b      	str	r3, [r7, #16]
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005426:	4b3e      	ldr	r3, [pc, #248]	; (8005520 <xPortStartScheduler+0x120>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a3f      	ldr	r2, [pc, #252]	; (8005528 <xPortStartScheduler+0x128>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d10a      	bne.n	8005446 <xPortStartScheduler+0x46>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	60fb      	str	r3, [r7, #12]
}
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005446:	4b39      	ldr	r3, [pc, #228]	; (800552c <xPortStartScheduler+0x12c>)
 8005448:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	22ff      	movs	r2, #255	; 0xff
 8005456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	b2db      	uxtb	r3, r3
 800545e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	b2db      	uxtb	r3, r3
 8005464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005468:	b2da      	uxtb	r2, r3
 800546a:	4b31      	ldr	r3, [pc, #196]	; (8005530 <xPortStartScheduler+0x130>)
 800546c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800546e:	4b31      	ldr	r3, [pc, #196]	; (8005534 <xPortStartScheduler+0x134>)
 8005470:	2207      	movs	r2, #7
 8005472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005474:	e009      	b.n	800548a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005476:	4b2f      	ldr	r3, [pc, #188]	; (8005534 <xPortStartScheduler+0x134>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3b01      	subs	r3, #1
 800547c:	4a2d      	ldr	r2, [pc, #180]	; (8005534 <xPortStartScheduler+0x134>)
 800547e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	b2db      	uxtb	r3, r3
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	b2db      	uxtb	r3, r3
 8005488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800548a:	78fb      	ldrb	r3, [r7, #3]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005492:	2b80      	cmp	r3, #128	; 0x80
 8005494:	d0ef      	beq.n	8005476 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005496:	4b27      	ldr	r3, [pc, #156]	; (8005534 <xPortStartScheduler+0x134>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f1c3 0307 	rsb	r3, r3, #7
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d00a      	beq.n	80054b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	60bb      	str	r3, [r7, #8]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054b8:	4b1e      	ldr	r3, [pc, #120]	; (8005534 <xPortStartScheduler+0x134>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	021b      	lsls	r3, r3, #8
 80054be:	4a1d      	ldr	r2, [pc, #116]	; (8005534 <xPortStartScheduler+0x134>)
 80054c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054c2:	4b1c      	ldr	r3, [pc, #112]	; (8005534 <xPortStartScheduler+0x134>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054ca:	4a1a      	ldr	r2, [pc, #104]	; (8005534 <xPortStartScheduler+0x134>)
 80054cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054d6:	4b18      	ldr	r3, [pc, #96]	; (8005538 <xPortStartScheduler+0x138>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a17      	ldr	r2, [pc, #92]	; (8005538 <xPortStartScheduler+0x138>)
 80054dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054e2:	4b15      	ldr	r3, [pc, #84]	; (8005538 <xPortStartScheduler+0x138>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a14      	ldr	r2, [pc, #80]	; (8005538 <xPortStartScheduler+0x138>)
 80054e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054ee:	f000 f8dd 	bl	80056ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054f2:	4b12      	ldr	r3, [pc, #72]	; (800553c <xPortStartScheduler+0x13c>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80054f8:	f000 f8fc 	bl	80056f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054fc:	4b10      	ldr	r3, [pc, #64]	; (8005540 <xPortStartScheduler+0x140>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a0f      	ldr	r2, [pc, #60]	; (8005540 <xPortStartScheduler+0x140>)
 8005502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005506:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005508:	f7ff ff66 	bl	80053d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800550c:	f7ff fd44 	bl	8004f98 <vTaskSwitchContext>
	prvTaskExitError();
 8005510:	f7ff ff1e 	bl	8005350 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	e000ed00 	.word	0xe000ed00
 8005524:	410fc271 	.word	0x410fc271
 8005528:	410fc270 	.word	0x410fc270
 800552c:	e000e400 	.word	0xe000e400
 8005530:	200008d8 	.word	0x200008d8
 8005534:	200008dc 	.word	0x200008dc
 8005538:	e000ed20 	.word	0xe000ed20
 800553c:	2000000c 	.word	0x2000000c
 8005540:	e000ef34 	.word	0xe000ef34

08005544 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
	__asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	607b      	str	r3, [r7, #4]
}
 800555c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800555e:	4b0f      	ldr	r3, [pc, #60]	; (800559c <vPortEnterCritical+0x58>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3301      	adds	r3, #1
 8005564:	4a0d      	ldr	r2, [pc, #52]	; (800559c <vPortEnterCritical+0x58>)
 8005566:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005568:	4b0c      	ldr	r3, [pc, #48]	; (800559c <vPortEnterCritical+0x58>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d10f      	bne.n	8005590 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005570:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <vPortEnterCritical+0x5c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <vPortEnterCritical+0x4c>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	603b      	str	r3, [r7, #0]
}
 800558c:	bf00      	nop
 800558e:	e7fe      	b.n	800558e <vPortEnterCritical+0x4a>
	}
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	2000000c 	.word	0x2000000c
 80055a0:	e000ed04 	.word	0xe000ed04

080055a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055aa:	4b12      	ldr	r3, [pc, #72]	; (80055f4 <vPortExitCritical+0x50>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10a      	bne.n	80055c8 <vPortExitCritical+0x24>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	607b      	str	r3, [r7, #4]
}
 80055c4:	bf00      	nop
 80055c6:	e7fe      	b.n	80055c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055c8:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <vPortExitCritical+0x50>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	4a09      	ldr	r2, [pc, #36]	; (80055f4 <vPortExitCritical+0x50>)
 80055d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055d2:	4b08      	ldr	r3, [pc, #32]	; (80055f4 <vPortExitCritical+0x50>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d105      	bne.n	80055e6 <vPortExitCritical+0x42>
 80055da:	2300      	movs	r3, #0
 80055dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	f383 8811 	msr	BASEPRI, r3
}
 80055e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	2000000c 	.word	0x2000000c
	...

08005600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005600:	f3ef 8009 	mrs	r0, PSP
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	4b15      	ldr	r3, [pc, #84]	; (8005660 <pxCurrentTCBConst>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	f01e 0f10 	tst.w	lr, #16
 8005610:	bf08      	it	eq
 8005612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561a:	6010      	str	r0, [r2, #0]
 800561c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005624:	f380 8811 	msr	BASEPRI, r0
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f7ff fcb2 	bl	8004f98 <vTaskSwitchContext>
 8005634:	f04f 0000 	mov.w	r0, #0
 8005638:	f380 8811 	msr	BASEPRI, r0
 800563c:	bc09      	pop	{r0, r3}
 800563e:	6819      	ldr	r1, [r3, #0]
 8005640:	6808      	ldr	r0, [r1, #0]
 8005642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005646:	f01e 0f10 	tst.w	lr, #16
 800564a:	bf08      	it	eq
 800564c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005650:	f380 8809 	msr	PSP, r0
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	f3af 8000 	nop.w

08005660 <pxCurrentTCBConst>:
 8005660:	200007ac 	.word	0x200007ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop

08005668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	607b      	str	r3, [r7, #4]
}
 8005680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005682:	f7ff fbcb 	bl	8004e1c <xTaskIncrementTick>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800568c:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <SysTick_Handler+0x40>)
 800568e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	2300      	movs	r3, #0
 8005696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	f383 8811 	msr	BASEPRI, r3
}
 800569e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056a0:	bf00      	nop
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	e000ed04 	.word	0xe000ed04

080056ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056b0:	4b0b      	ldr	r3, [pc, #44]	; (80056e0 <vPortSetupTimerInterrupt+0x34>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056b6:	4b0b      	ldr	r3, [pc, #44]	; (80056e4 <vPortSetupTimerInterrupt+0x38>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056bc:	4b0a      	ldr	r3, [pc, #40]	; (80056e8 <vPortSetupTimerInterrupt+0x3c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a0a      	ldr	r2, [pc, #40]	; (80056ec <vPortSetupTimerInterrupt+0x40>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	099b      	lsrs	r3, r3, #6
 80056c8:	4a09      	ldr	r2, [pc, #36]	; (80056f0 <vPortSetupTimerInterrupt+0x44>)
 80056ca:	3b01      	subs	r3, #1
 80056cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056ce:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <vPortSetupTimerInterrupt+0x34>)
 80056d0:	2207      	movs	r2, #7
 80056d2:	601a      	str	r2, [r3, #0]
}
 80056d4:	bf00      	nop
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	e000e010 	.word	0xe000e010
 80056e4:	e000e018 	.word	0xe000e018
 80056e8:	20000000 	.word	0x20000000
 80056ec:	10624dd3 	.word	0x10624dd3
 80056f0:	e000e014 	.word	0xe000e014

080056f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80056f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005704 <vPortEnableVFP+0x10>
 80056f8:	6801      	ldr	r1, [r0, #0]
 80056fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80056fe:	6001      	str	r1, [r0, #0]
 8005700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005702:	bf00      	nop
 8005704:	e000ed88 	.word	0xe000ed88

08005708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800570e:	f3ef 8305 	mrs	r3, IPSR
 8005712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b0f      	cmp	r3, #15
 8005718:	d914      	bls.n	8005744 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800571a:	4a17      	ldr	r2, [pc, #92]	; (8005778 <vPortValidateInterruptPriority+0x70>)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005724:	4b15      	ldr	r3, [pc, #84]	; (800577c <vPortValidateInterruptPriority+0x74>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	7afa      	ldrb	r2, [r7, #11]
 800572a:	429a      	cmp	r2, r3
 800572c:	d20a      	bcs.n	8005744 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	607b      	str	r3, [r7, #4]
}
 8005740:	bf00      	nop
 8005742:	e7fe      	b.n	8005742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005744:	4b0e      	ldr	r3, [pc, #56]	; (8005780 <vPortValidateInterruptPriority+0x78>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800574c:	4b0d      	ldr	r3, [pc, #52]	; (8005784 <vPortValidateInterruptPriority+0x7c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	429a      	cmp	r2, r3
 8005752:	d90a      	bls.n	800576a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	603b      	str	r3, [r7, #0]
}
 8005766:	bf00      	nop
 8005768:	e7fe      	b.n	8005768 <vPortValidateInterruptPriority+0x60>
	}
 800576a:	bf00      	nop
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	e000e3f0 	.word	0xe000e3f0
 800577c:	200008d8 	.word	0x200008d8
 8005780:	e000ed0c 	.word	0xe000ed0c
 8005784:	200008dc 	.word	0x200008dc

08005788 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08a      	sub	sp, #40	; 0x28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005790:	2300      	movs	r3, #0
 8005792:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005794:	f7ff fa76 	bl	8004c84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005798:	4b58      	ldr	r3, [pc, #352]	; (80058fc <pvPortMalloc+0x174>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057a0:	f000 f910 	bl	80059c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057a4:	4b56      	ldr	r3, [pc, #344]	; (8005900 <pvPortMalloc+0x178>)
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4013      	ands	r3, r2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f040 808e 	bne.w	80058ce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01d      	beq.n	80057f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80057b8:	2208      	movs	r2, #8
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4413      	add	r3, r2
 80057be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d014      	beq.n	80057f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f023 0307 	bic.w	r3, r3, #7
 80057d0:	3308      	adds	r3, #8
 80057d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <pvPortMalloc+0x6c>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	617b      	str	r3, [r7, #20]
}
 80057f0:	bf00      	nop
 80057f2:	e7fe      	b.n	80057f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d069      	beq.n	80058ce <pvPortMalloc+0x146>
 80057fa:	4b42      	ldr	r3, [pc, #264]	; (8005904 <pvPortMalloc+0x17c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	429a      	cmp	r2, r3
 8005802:	d864      	bhi.n	80058ce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005804:	4b40      	ldr	r3, [pc, #256]	; (8005908 <pvPortMalloc+0x180>)
 8005806:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005808:	4b3f      	ldr	r3, [pc, #252]	; (8005908 <pvPortMalloc+0x180>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800580e:	e004      	b.n	800581a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	429a      	cmp	r2, r3
 8005822:	d903      	bls.n	800582c <pvPortMalloc+0xa4>
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1f1      	bne.n	8005810 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800582c:	4b33      	ldr	r3, [pc, #204]	; (80058fc <pvPortMalloc+0x174>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005832:	429a      	cmp	r2, r3
 8005834:	d04b      	beq.n	80058ce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2208      	movs	r2, #8
 800583c:	4413      	add	r3, r2
 800583e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	1ad2      	subs	r2, r2, r3
 8005850:	2308      	movs	r3, #8
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	429a      	cmp	r2, r3
 8005856:	d91f      	bls.n	8005898 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4413      	add	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <pvPortMalloc+0xf8>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	613b      	str	r3, [r7, #16]
}
 800587c:	bf00      	nop
 800587e:	e7fe      	b.n	800587e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	1ad2      	subs	r2, r2, r3
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005892:	69b8      	ldr	r0, [r7, #24]
 8005894:	f000 f8f8 	bl	8005a88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005898:	4b1a      	ldr	r3, [pc, #104]	; (8005904 <pvPortMalloc+0x17c>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	4a18      	ldr	r2, [pc, #96]	; (8005904 <pvPortMalloc+0x17c>)
 80058a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058a6:	4b17      	ldr	r3, [pc, #92]	; (8005904 <pvPortMalloc+0x17c>)
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4b18      	ldr	r3, [pc, #96]	; (800590c <pvPortMalloc+0x184>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d203      	bcs.n	80058ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058b2:	4b14      	ldr	r3, [pc, #80]	; (8005904 <pvPortMalloc+0x17c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a15      	ldr	r2, [pc, #84]	; (800590c <pvPortMalloc+0x184>)
 80058b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	4b10      	ldr	r3, [pc, #64]	; (8005900 <pvPortMalloc+0x178>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058ce:	f7ff f9e7 	bl	8004ca0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <pvPortMalloc+0x16a>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	60fb      	str	r3, [r7, #12]
}
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <pvPortMalloc+0x168>
	return pvReturn;
 80058f2:	69fb      	ldr	r3, [r7, #28]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3728      	adds	r7, #40	; 0x28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	200014e8 	.word	0x200014e8
 8005900:	200014f4 	.word	0x200014f4
 8005904:	200014ec 	.word	0x200014ec
 8005908:	200014e0 	.word	0x200014e0
 800590c:	200014f0 	.word	0x200014f0

08005910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d048      	beq.n	80059b4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005922:	2308      	movs	r3, #8
 8005924:	425b      	negs	r3, r3
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4413      	add	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	4b21      	ldr	r3, [pc, #132]	; (80059bc <vPortFree+0xac>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4013      	ands	r3, r2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10a      	bne.n	8005954 <vPortFree+0x44>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	60fb      	str	r3, [r7, #12]
}
 8005950:	bf00      	nop
 8005952:	e7fe      	b.n	8005952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <vPortFree+0x62>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	60bb      	str	r3, [r7, #8]
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	4b11      	ldr	r3, [pc, #68]	; (80059bc <vPortFree+0xac>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d019      	beq.n	80059b4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d115      	bne.n	80059b4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <vPortFree+0xac>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	43db      	mvns	r3, r3
 8005992:	401a      	ands	r2, r3
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005998:	f7ff f974 	bl	8004c84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <vPortFree+0xb0>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4413      	add	r3, r2
 80059a6:	4a06      	ldr	r2, [pc, #24]	; (80059c0 <vPortFree+0xb0>)
 80059a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059aa:	6938      	ldr	r0, [r7, #16]
 80059ac:	f000 f86c 	bl	8005a88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80059b0:	f7ff f976 	bl	8004ca0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059b4:	bf00      	nop
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	200014f4 	.word	0x200014f4
 80059c0:	200014ec 	.word	0x200014ec

080059c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80059ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059d0:	4b27      	ldr	r3, [pc, #156]	; (8005a70 <prvHeapInit+0xac>)
 80059d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00c      	beq.n	80059f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3307      	adds	r3, #7
 80059e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0307 	bic.w	r3, r3, #7
 80059ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	4a1f      	ldr	r2, [pc, #124]	; (8005a70 <prvHeapInit+0xac>)
 80059f4:	4413      	add	r3, r2
 80059f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059fc:	4a1d      	ldr	r2, [pc, #116]	; (8005a74 <prvHeapInit+0xb0>)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a02:	4b1c      	ldr	r3, [pc, #112]	; (8005a74 <prvHeapInit+0xb0>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a10:	2208      	movs	r2, #8
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	1a9b      	subs	r3, r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0307 	bic.w	r3, r3, #7
 8005a1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4a15      	ldr	r2, [pc, #84]	; (8005a78 <prvHeapInit+0xb4>)
 8005a24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a26:	4b14      	ldr	r3, [pc, #80]	; (8005a78 <prvHeapInit+0xb4>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a2e:	4b12      	ldr	r3, [pc, #72]	; (8005a78 <prvHeapInit+0xb4>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	1ad2      	subs	r2, r2, r3
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a44:	4b0c      	ldr	r3, [pc, #48]	; (8005a78 <prvHeapInit+0xb4>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	4a0a      	ldr	r2, [pc, #40]	; (8005a7c <prvHeapInit+0xb8>)
 8005a52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	4a09      	ldr	r2, [pc, #36]	; (8005a80 <prvHeapInit+0xbc>)
 8005a5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a5c:	4b09      	ldr	r3, [pc, #36]	; (8005a84 <prvHeapInit+0xc0>)
 8005a5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a62:	601a      	str	r2, [r3, #0]
}
 8005a64:	bf00      	nop
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	200008e0 	.word	0x200008e0
 8005a74:	200014e0 	.word	0x200014e0
 8005a78:	200014e8 	.word	0x200014e8
 8005a7c:	200014f0 	.word	0x200014f0
 8005a80:	200014ec 	.word	0x200014ec
 8005a84:	200014f4 	.word	0x200014f4

08005a88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a90:	4b28      	ldr	r3, [pc, #160]	; (8005b34 <prvInsertBlockIntoFreeList+0xac>)
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	e002      	b.n	8005a9c <prvInsertBlockIntoFreeList+0x14>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d8f7      	bhi.n	8005a96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d108      	bne.n	8005aca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	441a      	add	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	441a      	add	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d118      	bne.n	8005b10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	4b15      	ldr	r3, [pc, #84]	; (8005b38 <prvInsertBlockIntoFreeList+0xb0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d00d      	beq.n	8005b06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	441a      	add	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	e008      	b.n	8005b18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b06:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <prvInsertBlockIntoFreeList+0xb0>)
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	e003      	b.n	8005b18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d002      	beq.n	8005b26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b26:	bf00      	nop
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	200014e0 	.word	0x200014e0
 8005b38:	200014e8 	.word	0x200014e8

08005b3c <siprintf>:
 8005b3c:	b40e      	push	{r1, r2, r3}
 8005b3e:	b500      	push	{lr}
 8005b40:	b09c      	sub	sp, #112	; 0x70
 8005b42:	ab1d      	add	r3, sp, #116	; 0x74
 8005b44:	9002      	str	r0, [sp, #8]
 8005b46:	9006      	str	r0, [sp, #24]
 8005b48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b4c:	4809      	ldr	r0, [pc, #36]	; (8005b74 <siprintf+0x38>)
 8005b4e:	9107      	str	r1, [sp, #28]
 8005b50:	9104      	str	r1, [sp, #16]
 8005b52:	4909      	ldr	r1, [pc, #36]	; (8005b78 <siprintf+0x3c>)
 8005b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b58:	9105      	str	r1, [sp, #20]
 8005b5a:	6800      	ldr	r0, [r0, #0]
 8005b5c:	9301      	str	r3, [sp, #4]
 8005b5e:	a902      	add	r1, sp, #8
 8005b60:	f000 f9f6 	bl	8005f50 <_svfiprintf_r>
 8005b64:	9b02      	ldr	r3, [sp, #8]
 8005b66:	2200      	movs	r2, #0
 8005b68:	701a      	strb	r2, [r3, #0]
 8005b6a:	b01c      	add	sp, #112	; 0x70
 8005b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b70:	b003      	add	sp, #12
 8005b72:	4770      	bx	lr
 8005b74:	2000005c 	.word	0x2000005c
 8005b78:	ffff0208 	.word	0xffff0208

08005b7c <memset>:
 8005b7c:	4402      	add	r2, r0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d100      	bne.n	8005b86 <memset+0xa>
 8005b84:	4770      	bx	lr
 8005b86:	f803 1b01 	strb.w	r1, [r3], #1
 8005b8a:	e7f9      	b.n	8005b80 <memset+0x4>

08005b8c <_reclaim_reent>:
 8005b8c:	4b29      	ldr	r3, [pc, #164]	; (8005c34 <_reclaim_reent+0xa8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4283      	cmp	r3, r0
 8005b92:	b570      	push	{r4, r5, r6, lr}
 8005b94:	4604      	mov	r4, r0
 8005b96:	d04b      	beq.n	8005c30 <_reclaim_reent+0xa4>
 8005b98:	69c3      	ldr	r3, [r0, #28]
 8005b9a:	b143      	cbz	r3, 8005bae <_reclaim_reent+0x22>
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d144      	bne.n	8005c2c <_reclaim_reent+0xa0>
 8005ba2:	69e3      	ldr	r3, [r4, #28]
 8005ba4:	6819      	ldr	r1, [r3, #0]
 8005ba6:	b111      	cbz	r1, 8005bae <_reclaim_reent+0x22>
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f000 f87f 	bl	8005cac <_free_r>
 8005bae:	6961      	ldr	r1, [r4, #20]
 8005bb0:	b111      	cbz	r1, 8005bb8 <_reclaim_reent+0x2c>
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f000 f87a 	bl	8005cac <_free_r>
 8005bb8:	69e1      	ldr	r1, [r4, #28]
 8005bba:	b111      	cbz	r1, 8005bc2 <_reclaim_reent+0x36>
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f000 f875 	bl	8005cac <_free_r>
 8005bc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005bc4:	b111      	cbz	r1, 8005bcc <_reclaim_reent+0x40>
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f000 f870 	bl	8005cac <_free_r>
 8005bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bce:	b111      	cbz	r1, 8005bd6 <_reclaim_reent+0x4a>
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f000 f86b 	bl	8005cac <_free_r>
 8005bd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005bd8:	b111      	cbz	r1, 8005be0 <_reclaim_reent+0x54>
 8005bda:	4620      	mov	r0, r4
 8005bdc:	f000 f866 	bl	8005cac <_free_r>
 8005be0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005be2:	b111      	cbz	r1, 8005bea <_reclaim_reent+0x5e>
 8005be4:	4620      	mov	r0, r4
 8005be6:	f000 f861 	bl	8005cac <_free_r>
 8005bea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005bec:	b111      	cbz	r1, 8005bf4 <_reclaim_reent+0x68>
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f000 f85c 	bl	8005cac <_free_r>
 8005bf4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005bf6:	b111      	cbz	r1, 8005bfe <_reclaim_reent+0x72>
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f000 f857 	bl	8005cac <_free_r>
 8005bfe:	6a23      	ldr	r3, [r4, #32]
 8005c00:	b1b3      	cbz	r3, 8005c30 <_reclaim_reent+0xa4>
 8005c02:	4620      	mov	r0, r4
 8005c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c08:	4718      	bx	r3
 8005c0a:	5949      	ldr	r1, [r1, r5]
 8005c0c:	b941      	cbnz	r1, 8005c20 <_reclaim_reent+0x94>
 8005c0e:	3504      	adds	r5, #4
 8005c10:	69e3      	ldr	r3, [r4, #28]
 8005c12:	2d80      	cmp	r5, #128	; 0x80
 8005c14:	68d9      	ldr	r1, [r3, #12]
 8005c16:	d1f8      	bne.n	8005c0a <_reclaim_reent+0x7e>
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f000 f847 	bl	8005cac <_free_r>
 8005c1e:	e7c0      	b.n	8005ba2 <_reclaim_reent+0x16>
 8005c20:	680e      	ldr	r6, [r1, #0]
 8005c22:	4620      	mov	r0, r4
 8005c24:	f000 f842 	bl	8005cac <_free_r>
 8005c28:	4631      	mov	r1, r6
 8005c2a:	e7ef      	b.n	8005c0c <_reclaim_reent+0x80>
 8005c2c:	2500      	movs	r5, #0
 8005c2e:	e7ef      	b.n	8005c10 <_reclaim_reent+0x84>
 8005c30:	bd70      	pop	{r4, r5, r6, pc}
 8005c32:	bf00      	nop
 8005c34:	2000005c 	.word	0x2000005c

08005c38 <__errno>:
 8005c38:	4b01      	ldr	r3, [pc, #4]	; (8005c40 <__errno+0x8>)
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	2000005c 	.word	0x2000005c

08005c44 <__libc_init_array>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	4d0d      	ldr	r5, [pc, #52]	; (8005c7c <__libc_init_array+0x38>)
 8005c48:	4c0d      	ldr	r4, [pc, #52]	; (8005c80 <__libc_init_array+0x3c>)
 8005c4a:	1b64      	subs	r4, r4, r5
 8005c4c:	10a4      	asrs	r4, r4, #2
 8005c4e:	2600      	movs	r6, #0
 8005c50:	42a6      	cmp	r6, r4
 8005c52:	d109      	bne.n	8005c68 <__libc_init_array+0x24>
 8005c54:	4d0b      	ldr	r5, [pc, #44]	; (8005c84 <__libc_init_array+0x40>)
 8005c56:	4c0c      	ldr	r4, [pc, #48]	; (8005c88 <__libc_init_array+0x44>)
 8005c58:	f000 fc6a 	bl	8006530 <_init>
 8005c5c:	1b64      	subs	r4, r4, r5
 8005c5e:	10a4      	asrs	r4, r4, #2
 8005c60:	2600      	movs	r6, #0
 8005c62:	42a6      	cmp	r6, r4
 8005c64:	d105      	bne.n	8005c72 <__libc_init_array+0x2e>
 8005c66:	bd70      	pop	{r4, r5, r6, pc}
 8005c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c6c:	4798      	blx	r3
 8005c6e:	3601      	adds	r6, #1
 8005c70:	e7ee      	b.n	8005c50 <__libc_init_array+0xc>
 8005c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c76:	4798      	blx	r3
 8005c78:	3601      	adds	r6, #1
 8005c7a:	e7f2      	b.n	8005c62 <__libc_init_array+0x1e>
 8005c7c:	0800663c 	.word	0x0800663c
 8005c80:	0800663c 	.word	0x0800663c
 8005c84:	0800663c 	.word	0x0800663c
 8005c88:	08006640 	.word	0x08006640

08005c8c <__retarget_lock_acquire_recursive>:
 8005c8c:	4770      	bx	lr

08005c8e <__retarget_lock_release_recursive>:
 8005c8e:	4770      	bx	lr

08005c90 <memcpy>:
 8005c90:	440a      	add	r2, r1
 8005c92:	4291      	cmp	r1, r2
 8005c94:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c98:	d100      	bne.n	8005c9c <memcpy+0xc>
 8005c9a:	4770      	bx	lr
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ca6:	4291      	cmp	r1, r2
 8005ca8:	d1f9      	bne.n	8005c9e <memcpy+0xe>
 8005caa:	bd10      	pop	{r4, pc}

08005cac <_free_r>:
 8005cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cae:	2900      	cmp	r1, #0
 8005cb0:	d044      	beq.n	8005d3c <_free_r+0x90>
 8005cb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cb6:	9001      	str	r0, [sp, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f1a1 0404 	sub.w	r4, r1, #4
 8005cbe:	bfb8      	it	lt
 8005cc0:	18e4      	addlt	r4, r4, r3
 8005cc2:	f000 f8df 	bl	8005e84 <__malloc_lock>
 8005cc6:	4a1e      	ldr	r2, [pc, #120]	; (8005d40 <_free_r+0x94>)
 8005cc8:	9801      	ldr	r0, [sp, #4]
 8005cca:	6813      	ldr	r3, [r2, #0]
 8005ccc:	b933      	cbnz	r3, 8005cdc <_free_r+0x30>
 8005cce:	6063      	str	r3, [r4, #4]
 8005cd0:	6014      	str	r4, [r2, #0]
 8005cd2:	b003      	add	sp, #12
 8005cd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cd8:	f000 b8da 	b.w	8005e90 <__malloc_unlock>
 8005cdc:	42a3      	cmp	r3, r4
 8005cde:	d908      	bls.n	8005cf2 <_free_r+0x46>
 8005ce0:	6825      	ldr	r5, [r4, #0]
 8005ce2:	1961      	adds	r1, r4, r5
 8005ce4:	428b      	cmp	r3, r1
 8005ce6:	bf01      	itttt	eq
 8005ce8:	6819      	ldreq	r1, [r3, #0]
 8005cea:	685b      	ldreq	r3, [r3, #4]
 8005cec:	1949      	addeq	r1, r1, r5
 8005cee:	6021      	streq	r1, [r4, #0]
 8005cf0:	e7ed      	b.n	8005cce <_free_r+0x22>
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	b10b      	cbz	r3, 8005cfc <_free_r+0x50>
 8005cf8:	42a3      	cmp	r3, r4
 8005cfa:	d9fa      	bls.n	8005cf2 <_free_r+0x46>
 8005cfc:	6811      	ldr	r1, [r2, #0]
 8005cfe:	1855      	adds	r5, r2, r1
 8005d00:	42a5      	cmp	r5, r4
 8005d02:	d10b      	bne.n	8005d1c <_free_r+0x70>
 8005d04:	6824      	ldr	r4, [r4, #0]
 8005d06:	4421      	add	r1, r4
 8005d08:	1854      	adds	r4, r2, r1
 8005d0a:	42a3      	cmp	r3, r4
 8005d0c:	6011      	str	r1, [r2, #0]
 8005d0e:	d1e0      	bne.n	8005cd2 <_free_r+0x26>
 8005d10:	681c      	ldr	r4, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	6053      	str	r3, [r2, #4]
 8005d16:	440c      	add	r4, r1
 8005d18:	6014      	str	r4, [r2, #0]
 8005d1a:	e7da      	b.n	8005cd2 <_free_r+0x26>
 8005d1c:	d902      	bls.n	8005d24 <_free_r+0x78>
 8005d1e:	230c      	movs	r3, #12
 8005d20:	6003      	str	r3, [r0, #0]
 8005d22:	e7d6      	b.n	8005cd2 <_free_r+0x26>
 8005d24:	6825      	ldr	r5, [r4, #0]
 8005d26:	1961      	adds	r1, r4, r5
 8005d28:	428b      	cmp	r3, r1
 8005d2a:	bf04      	itt	eq
 8005d2c:	6819      	ldreq	r1, [r3, #0]
 8005d2e:	685b      	ldreq	r3, [r3, #4]
 8005d30:	6063      	str	r3, [r4, #4]
 8005d32:	bf04      	itt	eq
 8005d34:	1949      	addeq	r1, r1, r5
 8005d36:	6021      	streq	r1, [r4, #0]
 8005d38:	6054      	str	r4, [r2, #4]
 8005d3a:	e7ca      	b.n	8005cd2 <_free_r+0x26>
 8005d3c:	b003      	add	sp, #12
 8005d3e:	bd30      	pop	{r4, r5, pc}
 8005d40:	20001638 	.word	0x20001638

08005d44 <sbrk_aligned>:
 8005d44:	b570      	push	{r4, r5, r6, lr}
 8005d46:	4e0e      	ldr	r6, [pc, #56]	; (8005d80 <sbrk_aligned+0x3c>)
 8005d48:	460c      	mov	r4, r1
 8005d4a:	6831      	ldr	r1, [r6, #0]
 8005d4c:	4605      	mov	r5, r0
 8005d4e:	b911      	cbnz	r1, 8005d56 <sbrk_aligned+0x12>
 8005d50:	f000 fba6 	bl	80064a0 <_sbrk_r>
 8005d54:	6030      	str	r0, [r6, #0]
 8005d56:	4621      	mov	r1, r4
 8005d58:	4628      	mov	r0, r5
 8005d5a:	f000 fba1 	bl	80064a0 <_sbrk_r>
 8005d5e:	1c43      	adds	r3, r0, #1
 8005d60:	d00a      	beq.n	8005d78 <sbrk_aligned+0x34>
 8005d62:	1cc4      	adds	r4, r0, #3
 8005d64:	f024 0403 	bic.w	r4, r4, #3
 8005d68:	42a0      	cmp	r0, r4
 8005d6a:	d007      	beq.n	8005d7c <sbrk_aligned+0x38>
 8005d6c:	1a21      	subs	r1, r4, r0
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f000 fb96 	bl	80064a0 <_sbrk_r>
 8005d74:	3001      	adds	r0, #1
 8005d76:	d101      	bne.n	8005d7c <sbrk_aligned+0x38>
 8005d78:	f04f 34ff 	mov.w	r4, #4294967295
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	bd70      	pop	{r4, r5, r6, pc}
 8005d80:	2000163c 	.word	0x2000163c

08005d84 <_malloc_r>:
 8005d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d88:	1ccd      	adds	r5, r1, #3
 8005d8a:	f025 0503 	bic.w	r5, r5, #3
 8005d8e:	3508      	adds	r5, #8
 8005d90:	2d0c      	cmp	r5, #12
 8005d92:	bf38      	it	cc
 8005d94:	250c      	movcc	r5, #12
 8005d96:	2d00      	cmp	r5, #0
 8005d98:	4607      	mov	r7, r0
 8005d9a:	db01      	blt.n	8005da0 <_malloc_r+0x1c>
 8005d9c:	42a9      	cmp	r1, r5
 8005d9e:	d905      	bls.n	8005dac <_malloc_r+0x28>
 8005da0:	230c      	movs	r3, #12
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	2600      	movs	r6, #0
 8005da6:	4630      	mov	r0, r6
 8005da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e80 <_malloc_r+0xfc>
 8005db0:	f000 f868 	bl	8005e84 <__malloc_lock>
 8005db4:	f8d8 3000 	ldr.w	r3, [r8]
 8005db8:	461c      	mov	r4, r3
 8005dba:	bb5c      	cbnz	r4, 8005e14 <_malloc_r+0x90>
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	f7ff ffc0 	bl	8005d44 <sbrk_aligned>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	d155      	bne.n	8005e76 <_malloc_r+0xf2>
 8005dca:	f8d8 4000 	ldr.w	r4, [r8]
 8005dce:	4626      	mov	r6, r4
 8005dd0:	2e00      	cmp	r6, #0
 8005dd2:	d145      	bne.n	8005e60 <_malloc_r+0xdc>
 8005dd4:	2c00      	cmp	r4, #0
 8005dd6:	d048      	beq.n	8005e6a <_malloc_r+0xe6>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	4631      	mov	r1, r6
 8005ddc:	4638      	mov	r0, r7
 8005dde:	eb04 0903 	add.w	r9, r4, r3
 8005de2:	f000 fb5d 	bl	80064a0 <_sbrk_r>
 8005de6:	4581      	cmp	r9, r0
 8005de8:	d13f      	bne.n	8005e6a <_malloc_r+0xe6>
 8005dea:	6821      	ldr	r1, [r4, #0]
 8005dec:	1a6d      	subs	r5, r5, r1
 8005dee:	4629      	mov	r1, r5
 8005df0:	4638      	mov	r0, r7
 8005df2:	f7ff ffa7 	bl	8005d44 <sbrk_aligned>
 8005df6:	3001      	adds	r0, #1
 8005df8:	d037      	beq.n	8005e6a <_malloc_r+0xe6>
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	442b      	add	r3, r5
 8005dfe:	6023      	str	r3, [r4, #0]
 8005e00:	f8d8 3000 	ldr.w	r3, [r8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d038      	beq.n	8005e7a <_malloc_r+0xf6>
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	42a2      	cmp	r2, r4
 8005e0c:	d12b      	bne.n	8005e66 <_malloc_r+0xe2>
 8005e0e:	2200      	movs	r2, #0
 8005e10:	605a      	str	r2, [r3, #4]
 8005e12:	e00f      	b.n	8005e34 <_malloc_r+0xb0>
 8005e14:	6822      	ldr	r2, [r4, #0]
 8005e16:	1b52      	subs	r2, r2, r5
 8005e18:	d41f      	bmi.n	8005e5a <_malloc_r+0xd6>
 8005e1a:	2a0b      	cmp	r2, #11
 8005e1c:	d917      	bls.n	8005e4e <_malloc_r+0xca>
 8005e1e:	1961      	adds	r1, r4, r5
 8005e20:	42a3      	cmp	r3, r4
 8005e22:	6025      	str	r5, [r4, #0]
 8005e24:	bf18      	it	ne
 8005e26:	6059      	strne	r1, [r3, #4]
 8005e28:	6863      	ldr	r3, [r4, #4]
 8005e2a:	bf08      	it	eq
 8005e2c:	f8c8 1000 	streq.w	r1, [r8]
 8005e30:	5162      	str	r2, [r4, r5]
 8005e32:	604b      	str	r3, [r1, #4]
 8005e34:	4638      	mov	r0, r7
 8005e36:	f104 060b 	add.w	r6, r4, #11
 8005e3a:	f000 f829 	bl	8005e90 <__malloc_unlock>
 8005e3e:	f026 0607 	bic.w	r6, r6, #7
 8005e42:	1d23      	adds	r3, r4, #4
 8005e44:	1af2      	subs	r2, r6, r3
 8005e46:	d0ae      	beq.n	8005da6 <_malloc_r+0x22>
 8005e48:	1b9b      	subs	r3, r3, r6
 8005e4a:	50a3      	str	r3, [r4, r2]
 8005e4c:	e7ab      	b.n	8005da6 <_malloc_r+0x22>
 8005e4e:	42a3      	cmp	r3, r4
 8005e50:	6862      	ldr	r2, [r4, #4]
 8005e52:	d1dd      	bne.n	8005e10 <_malloc_r+0x8c>
 8005e54:	f8c8 2000 	str.w	r2, [r8]
 8005e58:	e7ec      	b.n	8005e34 <_malloc_r+0xb0>
 8005e5a:	4623      	mov	r3, r4
 8005e5c:	6864      	ldr	r4, [r4, #4]
 8005e5e:	e7ac      	b.n	8005dba <_malloc_r+0x36>
 8005e60:	4634      	mov	r4, r6
 8005e62:	6876      	ldr	r6, [r6, #4]
 8005e64:	e7b4      	b.n	8005dd0 <_malloc_r+0x4c>
 8005e66:	4613      	mov	r3, r2
 8005e68:	e7cc      	b.n	8005e04 <_malloc_r+0x80>
 8005e6a:	230c      	movs	r3, #12
 8005e6c:	603b      	str	r3, [r7, #0]
 8005e6e:	4638      	mov	r0, r7
 8005e70:	f000 f80e 	bl	8005e90 <__malloc_unlock>
 8005e74:	e797      	b.n	8005da6 <_malloc_r+0x22>
 8005e76:	6025      	str	r5, [r4, #0]
 8005e78:	e7dc      	b.n	8005e34 <_malloc_r+0xb0>
 8005e7a:	605b      	str	r3, [r3, #4]
 8005e7c:	deff      	udf	#255	; 0xff
 8005e7e:	bf00      	nop
 8005e80:	20001638 	.word	0x20001638

08005e84 <__malloc_lock>:
 8005e84:	4801      	ldr	r0, [pc, #4]	; (8005e8c <__malloc_lock+0x8>)
 8005e86:	f7ff bf01 	b.w	8005c8c <__retarget_lock_acquire_recursive>
 8005e8a:	bf00      	nop
 8005e8c:	20001634 	.word	0x20001634

08005e90 <__malloc_unlock>:
 8005e90:	4801      	ldr	r0, [pc, #4]	; (8005e98 <__malloc_unlock+0x8>)
 8005e92:	f7ff befc 	b.w	8005c8e <__retarget_lock_release_recursive>
 8005e96:	bf00      	nop
 8005e98:	20001634 	.word	0x20001634

08005e9c <__ssputs_r>:
 8005e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea0:	688e      	ldr	r6, [r1, #8]
 8005ea2:	461f      	mov	r7, r3
 8005ea4:	42be      	cmp	r6, r7
 8005ea6:	680b      	ldr	r3, [r1, #0]
 8005ea8:	4682      	mov	sl, r0
 8005eaa:	460c      	mov	r4, r1
 8005eac:	4690      	mov	r8, r2
 8005eae:	d82c      	bhi.n	8005f0a <__ssputs_r+0x6e>
 8005eb0:	898a      	ldrh	r2, [r1, #12]
 8005eb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005eb6:	d026      	beq.n	8005f06 <__ssputs_r+0x6a>
 8005eb8:	6965      	ldr	r5, [r4, #20]
 8005eba:	6909      	ldr	r1, [r1, #16]
 8005ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ec0:	eba3 0901 	sub.w	r9, r3, r1
 8005ec4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ec8:	1c7b      	adds	r3, r7, #1
 8005eca:	444b      	add	r3, r9
 8005ecc:	106d      	asrs	r5, r5, #1
 8005ece:	429d      	cmp	r5, r3
 8005ed0:	bf38      	it	cc
 8005ed2:	461d      	movcc	r5, r3
 8005ed4:	0553      	lsls	r3, r2, #21
 8005ed6:	d527      	bpl.n	8005f28 <__ssputs_r+0x8c>
 8005ed8:	4629      	mov	r1, r5
 8005eda:	f7ff ff53 	bl	8005d84 <_malloc_r>
 8005ede:	4606      	mov	r6, r0
 8005ee0:	b360      	cbz	r0, 8005f3c <__ssputs_r+0xa0>
 8005ee2:	6921      	ldr	r1, [r4, #16]
 8005ee4:	464a      	mov	r2, r9
 8005ee6:	f7ff fed3 	bl	8005c90 <memcpy>
 8005eea:	89a3      	ldrh	r3, [r4, #12]
 8005eec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef4:	81a3      	strh	r3, [r4, #12]
 8005ef6:	6126      	str	r6, [r4, #16]
 8005ef8:	6165      	str	r5, [r4, #20]
 8005efa:	444e      	add	r6, r9
 8005efc:	eba5 0509 	sub.w	r5, r5, r9
 8005f00:	6026      	str	r6, [r4, #0]
 8005f02:	60a5      	str	r5, [r4, #8]
 8005f04:	463e      	mov	r6, r7
 8005f06:	42be      	cmp	r6, r7
 8005f08:	d900      	bls.n	8005f0c <__ssputs_r+0x70>
 8005f0a:	463e      	mov	r6, r7
 8005f0c:	6820      	ldr	r0, [r4, #0]
 8005f0e:	4632      	mov	r2, r6
 8005f10:	4641      	mov	r1, r8
 8005f12:	f000 faab 	bl	800646c <memmove>
 8005f16:	68a3      	ldr	r3, [r4, #8]
 8005f18:	1b9b      	subs	r3, r3, r6
 8005f1a:	60a3      	str	r3, [r4, #8]
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	4433      	add	r3, r6
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	2000      	movs	r0, #0
 8005f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f28:	462a      	mov	r2, r5
 8005f2a:	f000 fac9 	bl	80064c0 <_realloc_r>
 8005f2e:	4606      	mov	r6, r0
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d1e0      	bne.n	8005ef6 <__ssputs_r+0x5a>
 8005f34:	6921      	ldr	r1, [r4, #16]
 8005f36:	4650      	mov	r0, sl
 8005f38:	f7ff feb8 	bl	8005cac <_free_r>
 8005f3c:	230c      	movs	r3, #12
 8005f3e:	f8ca 3000 	str.w	r3, [sl]
 8005f42:	89a3      	ldrh	r3, [r4, #12]
 8005f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f48:	81a3      	strh	r3, [r4, #12]
 8005f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4e:	e7e9      	b.n	8005f24 <__ssputs_r+0x88>

08005f50 <_svfiprintf_r>:
 8005f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f54:	4698      	mov	r8, r3
 8005f56:	898b      	ldrh	r3, [r1, #12]
 8005f58:	061b      	lsls	r3, r3, #24
 8005f5a:	b09d      	sub	sp, #116	; 0x74
 8005f5c:	4607      	mov	r7, r0
 8005f5e:	460d      	mov	r5, r1
 8005f60:	4614      	mov	r4, r2
 8005f62:	d50e      	bpl.n	8005f82 <_svfiprintf_r+0x32>
 8005f64:	690b      	ldr	r3, [r1, #16]
 8005f66:	b963      	cbnz	r3, 8005f82 <_svfiprintf_r+0x32>
 8005f68:	2140      	movs	r1, #64	; 0x40
 8005f6a:	f7ff ff0b 	bl	8005d84 <_malloc_r>
 8005f6e:	6028      	str	r0, [r5, #0]
 8005f70:	6128      	str	r0, [r5, #16]
 8005f72:	b920      	cbnz	r0, 8005f7e <_svfiprintf_r+0x2e>
 8005f74:	230c      	movs	r3, #12
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7c:	e0d0      	b.n	8006120 <_svfiprintf_r+0x1d0>
 8005f7e:	2340      	movs	r3, #64	; 0x40
 8005f80:	616b      	str	r3, [r5, #20]
 8005f82:	2300      	movs	r3, #0
 8005f84:	9309      	str	r3, [sp, #36]	; 0x24
 8005f86:	2320      	movs	r3, #32
 8005f88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f90:	2330      	movs	r3, #48	; 0x30
 8005f92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006138 <_svfiprintf_r+0x1e8>
 8005f96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f9a:	f04f 0901 	mov.w	r9, #1
 8005f9e:	4623      	mov	r3, r4
 8005fa0:	469a      	mov	sl, r3
 8005fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fa6:	b10a      	cbz	r2, 8005fac <_svfiprintf_r+0x5c>
 8005fa8:	2a25      	cmp	r2, #37	; 0x25
 8005faa:	d1f9      	bne.n	8005fa0 <_svfiprintf_r+0x50>
 8005fac:	ebba 0b04 	subs.w	fp, sl, r4
 8005fb0:	d00b      	beq.n	8005fca <_svfiprintf_r+0x7a>
 8005fb2:	465b      	mov	r3, fp
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	4638      	mov	r0, r7
 8005fba:	f7ff ff6f 	bl	8005e9c <__ssputs_r>
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	f000 80a9 	beq.w	8006116 <_svfiprintf_r+0x1c6>
 8005fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fc6:	445a      	add	r2, fp
 8005fc8:	9209      	str	r2, [sp, #36]	; 0x24
 8005fca:	f89a 3000 	ldrb.w	r3, [sl]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 80a1 	beq.w	8006116 <_svfiprintf_r+0x1c6>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fde:	f10a 0a01 	add.w	sl, sl, #1
 8005fe2:	9304      	str	r3, [sp, #16]
 8005fe4:	9307      	str	r3, [sp, #28]
 8005fe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fea:	931a      	str	r3, [sp, #104]	; 0x68
 8005fec:	4654      	mov	r4, sl
 8005fee:	2205      	movs	r2, #5
 8005ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff4:	4850      	ldr	r0, [pc, #320]	; (8006138 <_svfiprintf_r+0x1e8>)
 8005ff6:	f7fa f8f3 	bl	80001e0 <memchr>
 8005ffa:	9a04      	ldr	r2, [sp, #16]
 8005ffc:	b9d8      	cbnz	r0, 8006036 <_svfiprintf_r+0xe6>
 8005ffe:	06d0      	lsls	r0, r2, #27
 8006000:	bf44      	itt	mi
 8006002:	2320      	movmi	r3, #32
 8006004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006008:	0711      	lsls	r1, r2, #28
 800600a:	bf44      	itt	mi
 800600c:	232b      	movmi	r3, #43	; 0x2b
 800600e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006012:	f89a 3000 	ldrb.w	r3, [sl]
 8006016:	2b2a      	cmp	r3, #42	; 0x2a
 8006018:	d015      	beq.n	8006046 <_svfiprintf_r+0xf6>
 800601a:	9a07      	ldr	r2, [sp, #28]
 800601c:	4654      	mov	r4, sl
 800601e:	2000      	movs	r0, #0
 8006020:	f04f 0c0a 	mov.w	ip, #10
 8006024:	4621      	mov	r1, r4
 8006026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800602a:	3b30      	subs	r3, #48	; 0x30
 800602c:	2b09      	cmp	r3, #9
 800602e:	d94d      	bls.n	80060cc <_svfiprintf_r+0x17c>
 8006030:	b1b0      	cbz	r0, 8006060 <_svfiprintf_r+0x110>
 8006032:	9207      	str	r2, [sp, #28]
 8006034:	e014      	b.n	8006060 <_svfiprintf_r+0x110>
 8006036:	eba0 0308 	sub.w	r3, r0, r8
 800603a:	fa09 f303 	lsl.w	r3, r9, r3
 800603e:	4313      	orrs	r3, r2
 8006040:	9304      	str	r3, [sp, #16]
 8006042:	46a2      	mov	sl, r4
 8006044:	e7d2      	b.n	8005fec <_svfiprintf_r+0x9c>
 8006046:	9b03      	ldr	r3, [sp, #12]
 8006048:	1d19      	adds	r1, r3, #4
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	9103      	str	r1, [sp, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	bfbb      	ittet	lt
 8006052:	425b      	neglt	r3, r3
 8006054:	f042 0202 	orrlt.w	r2, r2, #2
 8006058:	9307      	strge	r3, [sp, #28]
 800605a:	9307      	strlt	r3, [sp, #28]
 800605c:	bfb8      	it	lt
 800605e:	9204      	strlt	r2, [sp, #16]
 8006060:	7823      	ldrb	r3, [r4, #0]
 8006062:	2b2e      	cmp	r3, #46	; 0x2e
 8006064:	d10c      	bne.n	8006080 <_svfiprintf_r+0x130>
 8006066:	7863      	ldrb	r3, [r4, #1]
 8006068:	2b2a      	cmp	r3, #42	; 0x2a
 800606a:	d134      	bne.n	80060d6 <_svfiprintf_r+0x186>
 800606c:	9b03      	ldr	r3, [sp, #12]
 800606e:	1d1a      	adds	r2, r3, #4
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	9203      	str	r2, [sp, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	bfb8      	it	lt
 8006078:	f04f 33ff 	movlt.w	r3, #4294967295
 800607c:	3402      	adds	r4, #2
 800607e:	9305      	str	r3, [sp, #20]
 8006080:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006148 <_svfiprintf_r+0x1f8>
 8006084:	7821      	ldrb	r1, [r4, #0]
 8006086:	2203      	movs	r2, #3
 8006088:	4650      	mov	r0, sl
 800608a:	f7fa f8a9 	bl	80001e0 <memchr>
 800608e:	b138      	cbz	r0, 80060a0 <_svfiprintf_r+0x150>
 8006090:	9b04      	ldr	r3, [sp, #16]
 8006092:	eba0 000a 	sub.w	r0, r0, sl
 8006096:	2240      	movs	r2, #64	; 0x40
 8006098:	4082      	lsls	r2, r0
 800609a:	4313      	orrs	r3, r2
 800609c:	3401      	adds	r4, #1
 800609e:	9304      	str	r3, [sp, #16]
 80060a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060a4:	4825      	ldr	r0, [pc, #148]	; (800613c <_svfiprintf_r+0x1ec>)
 80060a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060aa:	2206      	movs	r2, #6
 80060ac:	f7fa f898 	bl	80001e0 <memchr>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d038      	beq.n	8006126 <_svfiprintf_r+0x1d6>
 80060b4:	4b22      	ldr	r3, [pc, #136]	; (8006140 <_svfiprintf_r+0x1f0>)
 80060b6:	bb1b      	cbnz	r3, 8006100 <_svfiprintf_r+0x1b0>
 80060b8:	9b03      	ldr	r3, [sp, #12]
 80060ba:	3307      	adds	r3, #7
 80060bc:	f023 0307 	bic.w	r3, r3, #7
 80060c0:	3308      	adds	r3, #8
 80060c2:	9303      	str	r3, [sp, #12]
 80060c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c6:	4433      	add	r3, r6
 80060c8:	9309      	str	r3, [sp, #36]	; 0x24
 80060ca:	e768      	b.n	8005f9e <_svfiprintf_r+0x4e>
 80060cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80060d0:	460c      	mov	r4, r1
 80060d2:	2001      	movs	r0, #1
 80060d4:	e7a6      	b.n	8006024 <_svfiprintf_r+0xd4>
 80060d6:	2300      	movs	r3, #0
 80060d8:	3401      	adds	r4, #1
 80060da:	9305      	str	r3, [sp, #20]
 80060dc:	4619      	mov	r1, r3
 80060de:	f04f 0c0a 	mov.w	ip, #10
 80060e2:	4620      	mov	r0, r4
 80060e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060e8:	3a30      	subs	r2, #48	; 0x30
 80060ea:	2a09      	cmp	r2, #9
 80060ec:	d903      	bls.n	80060f6 <_svfiprintf_r+0x1a6>
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0c6      	beq.n	8006080 <_svfiprintf_r+0x130>
 80060f2:	9105      	str	r1, [sp, #20]
 80060f4:	e7c4      	b.n	8006080 <_svfiprintf_r+0x130>
 80060f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80060fa:	4604      	mov	r4, r0
 80060fc:	2301      	movs	r3, #1
 80060fe:	e7f0      	b.n	80060e2 <_svfiprintf_r+0x192>
 8006100:	ab03      	add	r3, sp, #12
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	462a      	mov	r2, r5
 8006106:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <_svfiprintf_r+0x1f4>)
 8006108:	a904      	add	r1, sp, #16
 800610a:	4638      	mov	r0, r7
 800610c:	f3af 8000 	nop.w
 8006110:	1c42      	adds	r2, r0, #1
 8006112:	4606      	mov	r6, r0
 8006114:	d1d6      	bne.n	80060c4 <_svfiprintf_r+0x174>
 8006116:	89ab      	ldrh	r3, [r5, #12]
 8006118:	065b      	lsls	r3, r3, #25
 800611a:	f53f af2d 	bmi.w	8005f78 <_svfiprintf_r+0x28>
 800611e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006120:	b01d      	add	sp, #116	; 0x74
 8006122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006126:	ab03      	add	r3, sp, #12
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	462a      	mov	r2, r5
 800612c:	4b05      	ldr	r3, [pc, #20]	; (8006144 <_svfiprintf_r+0x1f4>)
 800612e:	a904      	add	r1, sp, #16
 8006130:	4638      	mov	r0, r7
 8006132:	f000 f879 	bl	8006228 <_printf_i>
 8006136:	e7eb      	b.n	8006110 <_svfiprintf_r+0x1c0>
 8006138:	08006608 	.word	0x08006608
 800613c:	08006612 	.word	0x08006612
 8006140:	00000000 	.word	0x00000000
 8006144:	08005e9d 	.word	0x08005e9d
 8006148:	0800660e 	.word	0x0800660e

0800614c <_printf_common>:
 800614c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006150:	4616      	mov	r6, r2
 8006152:	4699      	mov	r9, r3
 8006154:	688a      	ldr	r2, [r1, #8]
 8006156:	690b      	ldr	r3, [r1, #16]
 8006158:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800615c:	4293      	cmp	r3, r2
 800615e:	bfb8      	it	lt
 8006160:	4613      	movlt	r3, r2
 8006162:	6033      	str	r3, [r6, #0]
 8006164:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006168:	4607      	mov	r7, r0
 800616a:	460c      	mov	r4, r1
 800616c:	b10a      	cbz	r2, 8006172 <_printf_common+0x26>
 800616e:	3301      	adds	r3, #1
 8006170:	6033      	str	r3, [r6, #0]
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	0699      	lsls	r1, r3, #26
 8006176:	bf42      	ittt	mi
 8006178:	6833      	ldrmi	r3, [r6, #0]
 800617a:	3302      	addmi	r3, #2
 800617c:	6033      	strmi	r3, [r6, #0]
 800617e:	6825      	ldr	r5, [r4, #0]
 8006180:	f015 0506 	ands.w	r5, r5, #6
 8006184:	d106      	bne.n	8006194 <_printf_common+0x48>
 8006186:	f104 0a19 	add.w	sl, r4, #25
 800618a:	68e3      	ldr	r3, [r4, #12]
 800618c:	6832      	ldr	r2, [r6, #0]
 800618e:	1a9b      	subs	r3, r3, r2
 8006190:	42ab      	cmp	r3, r5
 8006192:	dc26      	bgt.n	80061e2 <_printf_common+0x96>
 8006194:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006198:	1e13      	subs	r3, r2, #0
 800619a:	6822      	ldr	r2, [r4, #0]
 800619c:	bf18      	it	ne
 800619e:	2301      	movne	r3, #1
 80061a0:	0692      	lsls	r2, r2, #26
 80061a2:	d42b      	bmi.n	80061fc <_printf_common+0xb0>
 80061a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061a8:	4649      	mov	r1, r9
 80061aa:	4638      	mov	r0, r7
 80061ac:	47c0      	blx	r8
 80061ae:	3001      	adds	r0, #1
 80061b0:	d01e      	beq.n	80061f0 <_printf_common+0xa4>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	6922      	ldr	r2, [r4, #16]
 80061b6:	f003 0306 	and.w	r3, r3, #6
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	bf02      	ittt	eq
 80061be:	68e5      	ldreq	r5, [r4, #12]
 80061c0:	6833      	ldreq	r3, [r6, #0]
 80061c2:	1aed      	subeq	r5, r5, r3
 80061c4:	68a3      	ldr	r3, [r4, #8]
 80061c6:	bf0c      	ite	eq
 80061c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061cc:	2500      	movne	r5, #0
 80061ce:	4293      	cmp	r3, r2
 80061d0:	bfc4      	itt	gt
 80061d2:	1a9b      	subgt	r3, r3, r2
 80061d4:	18ed      	addgt	r5, r5, r3
 80061d6:	2600      	movs	r6, #0
 80061d8:	341a      	adds	r4, #26
 80061da:	42b5      	cmp	r5, r6
 80061dc:	d11a      	bne.n	8006214 <_printf_common+0xc8>
 80061de:	2000      	movs	r0, #0
 80061e0:	e008      	b.n	80061f4 <_printf_common+0xa8>
 80061e2:	2301      	movs	r3, #1
 80061e4:	4652      	mov	r2, sl
 80061e6:	4649      	mov	r1, r9
 80061e8:	4638      	mov	r0, r7
 80061ea:	47c0      	blx	r8
 80061ec:	3001      	adds	r0, #1
 80061ee:	d103      	bne.n	80061f8 <_printf_common+0xac>
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
 80061f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f8:	3501      	adds	r5, #1
 80061fa:	e7c6      	b.n	800618a <_printf_common+0x3e>
 80061fc:	18e1      	adds	r1, r4, r3
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	2030      	movs	r0, #48	; 0x30
 8006202:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006206:	4422      	add	r2, r4
 8006208:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800620c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006210:	3302      	adds	r3, #2
 8006212:	e7c7      	b.n	80061a4 <_printf_common+0x58>
 8006214:	2301      	movs	r3, #1
 8006216:	4622      	mov	r2, r4
 8006218:	4649      	mov	r1, r9
 800621a:	4638      	mov	r0, r7
 800621c:	47c0      	blx	r8
 800621e:	3001      	adds	r0, #1
 8006220:	d0e6      	beq.n	80061f0 <_printf_common+0xa4>
 8006222:	3601      	adds	r6, #1
 8006224:	e7d9      	b.n	80061da <_printf_common+0x8e>
	...

08006228 <_printf_i>:
 8006228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800622c:	7e0f      	ldrb	r7, [r1, #24]
 800622e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006230:	2f78      	cmp	r7, #120	; 0x78
 8006232:	4691      	mov	r9, r2
 8006234:	4680      	mov	r8, r0
 8006236:	460c      	mov	r4, r1
 8006238:	469a      	mov	sl, r3
 800623a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800623e:	d807      	bhi.n	8006250 <_printf_i+0x28>
 8006240:	2f62      	cmp	r7, #98	; 0x62
 8006242:	d80a      	bhi.n	800625a <_printf_i+0x32>
 8006244:	2f00      	cmp	r7, #0
 8006246:	f000 80d4 	beq.w	80063f2 <_printf_i+0x1ca>
 800624a:	2f58      	cmp	r7, #88	; 0x58
 800624c:	f000 80c0 	beq.w	80063d0 <_printf_i+0x1a8>
 8006250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006254:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006258:	e03a      	b.n	80062d0 <_printf_i+0xa8>
 800625a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800625e:	2b15      	cmp	r3, #21
 8006260:	d8f6      	bhi.n	8006250 <_printf_i+0x28>
 8006262:	a101      	add	r1, pc, #4	; (adr r1, 8006268 <_printf_i+0x40>)
 8006264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006268:	080062c1 	.word	0x080062c1
 800626c:	080062d5 	.word	0x080062d5
 8006270:	08006251 	.word	0x08006251
 8006274:	08006251 	.word	0x08006251
 8006278:	08006251 	.word	0x08006251
 800627c:	08006251 	.word	0x08006251
 8006280:	080062d5 	.word	0x080062d5
 8006284:	08006251 	.word	0x08006251
 8006288:	08006251 	.word	0x08006251
 800628c:	08006251 	.word	0x08006251
 8006290:	08006251 	.word	0x08006251
 8006294:	080063d9 	.word	0x080063d9
 8006298:	08006301 	.word	0x08006301
 800629c:	08006393 	.word	0x08006393
 80062a0:	08006251 	.word	0x08006251
 80062a4:	08006251 	.word	0x08006251
 80062a8:	080063fb 	.word	0x080063fb
 80062ac:	08006251 	.word	0x08006251
 80062b0:	08006301 	.word	0x08006301
 80062b4:	08006251 	.word	0x08006251
 80062b8:	08006251 	.word	0x08006251
 80062bc:	0800639b 	.word	0x0800639b
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	1d1a      	adds	r2, r3, #4
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	602a      	str	r2, [r5, #0]
 80062c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062d0:	2301      	movs	r3, #1
 80062d2:	e09f      	b.n	8006414 <_printf_i+0x1ec>
 80062d4:	6820      	ldr	r0, [r4, #0]
 80062d6:	682b      	ldr	r3, [r5, #0]
 80062d8:	0607      	lsls	r7, r0, #24
 80062da:	f103 0104 	add.w	r1, r3, #4
 80062de:	6029      	str	r1, [r5, #0]
 80062e0:	d501      	bpl.n	80062e6 <_printf_i+0xbe>
 80062e2:	681e      	ldr	r6, [r3, #0]
 80062e4:	e003      	b.n	80062ee <_printf_i+0xc6>
 80062e6:	0646      	lsls	r6, r0, #25
 80062e8:	d5fb      	bpl.n	80062e2 <_printf_i+0xba>
 80062ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80062ee:	2e00      	cmp	r6, #0
 80062f0:	da03      	bge.n	80062fa <_printf_i+0xd2>
 80062f2:	232d      	movs	r3, #45	; 0x2d
 80062f4:	4276      	negs	r6, r6
 80062f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062fa:	485a      	ldr	r0, [pc, #360]	; (8006464 <_printf_i+0x23c>)
 80062fc:	230a      	movs	r3, #10
 80062fe:	e012      	b.n	8006326 <_printf_i+0xfe>
 8006300:	682b      	ldr	r3, [r5, #0]
 8006302:	6820      	ldr	r0, [r4, #0]
 8006304:	1d19      	adds	r1, r3, #4
 8006306:	6029      	str	r1, [r5, #0]
 8006308:	0605      	lsls	r5, r0, #24
 800630a:	d501      	bpl.n	8006310 <_printf_i+0xe8>
 800630c:	681e      	ldr	r6, [r3, #0]
 800630e:	e002      	b.n	8006316 <_printf_i+0xee>
 8006310:	0641      	lsls	r1, r0, #25
 8006312:	d5fb      	bpl.n	800630c <_printf_i+0xe4>
 8006314:	881e      	ldrh	r6, [r3, #0]
 8006316:	4853      	ldr	r0, [pc, #332]	; (8006464 <_printf_i+0x23c>)
 8006318:	2f6f      	cmp	r7, #111	; 0x6f
 800631a:	bf0c      	ite	eq
 800631c:	2308      	moveq	r3, #8
 800631e:	230a      	movne	r3, #10
 8006320:	2100      	movs	r1, #0
 8006322:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006326:	6865      	ldr	r5, [r4, #4]
 8006328:	60a5      	str	r5, [r4, #8]
 800632a:	2d00      	cmp	r5, #0
 800632c:	bfa2      	ittt	ge
 800632e:	6821      	ldrge	r1, [r4, #0]
 8006330:	f021 0104 	bicge.w	r1, r1, #4
 8006334:	6021      	strge	r1, [r4, #0]
 8006336:	b90e      	cbnz	r6, 800633c <_printf_i+0x114>
 8006338:	2d00      	cmp	r5, #0
 800633a:	d04b      	beq.n	80063d4 <_printf_i+0x1ac>
 800633c:	4615      	mov	r5, r2
 800633e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006342:	fb03 6711 	mls	r7, r3, r1, r6
 8006346:	5dc7      	ldrb	r7, [r0, r7]
 8006348:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800634c:	4637      	mov	r7, r6
 800634e:	42bb      	cmp	r3, r7
 8006350:	460e      	mov	r6, r1
 8006352:	d9f4      	bls.n	800633e <_printf_i+0x116>
 8006354:	2b08      	cmp	r3, #8
 8006356:	d10b      	bne.n	8006370 <_printf_i+0x148>
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	07de      	lsls	r6, r3, #31
 800635c:	d508      	bpl.n	8006370 <_printf_i+0x148>
 800635e:	6923      	ldr	r3, [r4, #16]
 8006360:	6861      	ldr	r1, [r4, #4]
 8006362:	4299      	cmp	r1, r3
 8006364:	bfde      	ittt	le
 8006366:	2330      	movle	r3, #48	; 0x30
 8006368:	f805 3c01 	strble.w	r3, [r5, #-1]
 800636c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006370:	1b52      	subs	r2, r2, r5
 8006372:	6122      	str	r2, [r4, #16]
 8006374:	f8cd a000 	str.w	sl, [sp]
 8006378:	464b      	mov	r3, r9
 800637a:	aa03      	add	r2, sp, #12
 800637c:	4621      	mov	r1, r4
 800637e:	4640      	mov	r0, r8
 8006380:	f7ff fee4 	bl	800614c <_printf_common>
 8006384:	3001      	adds	r0, #1
 8006386:	d14a      	bne.n	800641e <_printf_i+0x1f6>
 8006388:	f04f 30ff 	mov.w	r0, #4294967295
 800638c:	b004      	add	sp, #16
 800638e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	f043 0320 	orr.w	r3, r3, #32
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	4833      	ldr	r0, [pc, #204]	; (8006468 <_printf_i+0x240>)
 800639c:	2778      	movs	r7, #120	; 0x78
 800639e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	6829      	ldr	r1, [r5, #0]
 80063a6:	061f      	lsls	r7, r3, #24
 80063a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80063ac:	d402      	bmi.n	80063b4 <_printf_i+0x18c>
 80063ae:	065f      	lsls	r7, r3, #25
 80063b0:	bf48      	it	mi
 80063b2:	b2b6      	uxthmi	r6, r6
 80063b4:	07df      	lsls	r7, r3, #31
 80063b6:	bf48      	it	mi
 80063b8:	f043 0320 	orrmi.w	r3, r3, #32
 80063bc:	6029      	str	r1, [r5, #0]
 80063be:	bf48      	it	mi
 80063c0:	6023      	strmi	r3, [r4, #0]
 80063c2:	b91e      	cbnz	r6, 80063cc <_printf_i+0x1a4>
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	f023 0320 	bic.w	r3, r3, #32
 80063ca:	6023      	str	r3, [r4, #0]
 80063cc:	2310      	movs	r3, #16
 80063ce:	e7a7      	b.n	8006320 <_printf_i+0xf8>
 80063d0:	4824      	ldr	r0, [pc, #144]	; (8006464 <_printf_i+0x23c>)
 80063d2:	e7e4      	b.n	800639e <_printf_i+0x176>
 80063d4:	4615      	mov	r5, r2
 80063d6:	e7bd      	b.n	8006354 <_printf_i+0x12c>
 80063d8:	682b      	ldr	r3, [r5, #0]
 80063da:	6826      	ldr	r6, [r4, #0]
 80063dc:	6961      	ldr	r1, [r4, #20]
 80063de:	1d18      	adds	r0, r3, #4
 80063e0:	6028      	str	r0, [r5, #0]
 80063e2:	0635      	lsls	r5, r6, #24
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	d501      	bpl.n	80063ec <_printf_i+0x1c4>
 80063e8:	6019      	str	r1, [r3, #0]
 80063ea:	e002      	b.n	80063f2 <_printf_i+0x1ca>
 80063ec:	0670      	lsls	r0, r6, #25
 80063ee:	d5fb      	bpl.n	80063e8 <_printf_i+0x1c0>
 80063f0:	8019      	strh	r1, [r3, #0]
 80063f2:	2300      	movs	r3, #0
 80063f4:	6123      	str	r3, [r4, #16]
 80063f6:	4615      	mov	r5, r2
 80063f8:	e7bc      	b.n	8006374 <_printf_i+0x14c>
 80063fa:	682b      	ldr	r3, [r5, #0]
 80063fc:	1d1a      	adds	r2, r3, #4
 80063fe:	602a      	str	r2, [r5, #0]
 8006400:	681d      	ldr	r5, [r3, #0]
 8006402:	6862      	ldr	r2, [r4, #4]
 8006404:	2100      	movs	r1, #0
 8006406:	4628      	mov	r0, r5
 8006408:	f7f9 feea 	bl	80001e0 <memchr>
 800640c:	b108      	cbz	r0, 8006412 <_printf_i+0x1ea>
 800640e:	1b40      	subs	r0, r0, r5
 8006410:	6060      	str	r0, [r4, #4]
 8006412:	6863      	ldr	r3, [r4, #4]
 8006414:	6123      	str	r3, [r4, #16]
 8006416:	2300      	movs	r3, #0
 8006418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800641c:	e7aa      	b.n	8006374 <_printf_i+0x14c>
 800641e:	6923      	ldr	r3, [r4, #16]
 8006420:	462a      	mov	r2, r5
 8006422:	4649      	mov	r1, r9
 8006424:	4640      	mov	r0, r8
 8006426:	47d0      	blx	sl
 8006428:	3001      	adds	r0, #1
 800642a:	d0ad      	beq.n	8006388 <_printf_i+0x160>
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	079b      	lsls	r3, r3, #30
 8006430:	d413      	bmi.n	800645a <_printf_i+0x232>
 8006432:	68e0      	ldr	r0, [r4, #12]
 8006434:	9b03      	ldr	r3, [sp, #12]
 8006436:	4298      	cmp	r0, r3
 8006438:	bfb8      	it	lt
 800643a:	4618      	movlt	r0, r3
 800643c:	e7a6      	b.n	800638c <_printf_i+0x164>
 800643e:	2301      	movs	r3, #1
 8006440:	4632      	mov	r2, r6
 8006442:	4649      	mov	r1, r9
 8006444:	4640      	mov	r0, r8
 8006446:	47d0      	blx	sl
 8006448:	3001      	adds	r0, #1
 800644a:	d09d      	beq.n	8006388 <_printf_i+0x160>
 800644c:	3501      	adds	r5, #1
 800644e:	68e3      	ldr	r3, [r4, #12]
 8006450:	9903      	ldr	r1, [sp, #12]
 8006452:	1a5b      	subs	r3, r3, r1
 8006454:	42ab      	cmp	r3, r5
 8006456:	dcf2      	bgt.n	800643e <_printf_i+0x216>
 8006458:	e7eb      	b.n	8006432 <_printf_i+0x20a>
 800645a:	2500      	movs	r5, #0
 800645c:	f104 0619 	add.w	r6, r4, #25
 8006460:	e7f5      	b.n	800644e <_printf_i+0x226>
 8006462:	bf00      	nop
 8006464:	08006619 	.word	0x08006619
 8006468:	0800662a 	.word	0x0800662a

0800646c <memmove>:
 800646c:	4288      	cmp	r0, r1
 800646e:	b510      	push	{r4, lr}
 8006470:	eb01 0402 	add.w	r4, r1, r2
 8006474:	d902      	bls.n	800647c <memmove+0x10>
 8006476:	4284      	cmp	r4, r0
 8006478:	4623      	mov	r3, r4
 800647a:	d807      	bhi.n	800648c <memmove+0x20>
 800647c:	1e43      	subs	r3, r0, #1
 800647e:	42a1      	cmp	r1, r4
 8006480:	d008      	beq.n	8006494 <memmove+0x28>
 8006482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006486:	f803 2f01 	strb.w	r2, [r3, #1]!
 800648a:	e7f8      	b.n	800647e <memmove+0x12>
 800648c:	4402      	add	r2, r0
 800648e:	4601      	mov	r1, r0
 8006490:	428a      	cmp	r2, r1
 8006492:	d100      	bne.n	8006496 <memmove+0x2a>
 8006494:	bd10      	pop	{r4, pc}
 8006496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800649a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800649e:	e7f7      	b.n	8006490 <memmove+0x24>

080064a0 <_sbrk_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	4d06      	ldr	r5, [pc, #24]	; (80064bc <_sbrk_r+0x1c>)
 80064a4:	2300      	movs	r3, #0
 80064a6:	4604      	mov	r4, r0
 80064a8:	4608      	mov	r0, r1
 80064aa:	602b      	str	r3, [r5, #0]
 80064ac:	f7fa fb86 	bl	8000bbc <_sbrk>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	d102      	bne.n	80064ba <_sbrk_r+0x1a>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	b103      	cbz	r3, 80064ba <_sbrk_r+0x1a>
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	20001630 	.word	0x20001630

080064c0 <_realloc_r>:
 80064c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c4:	4680      	mov	r8, r0
 80064c6:	4614      	mov	r4, r2
 80064c8:	460e      	mov	r6, r1
 80064ca:	b921      	cbnz	r1, 80064d6 <_realloc_r+0x16>
 80064cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064d0:	4611      	mov	r1, r2
 80064d2:	f7ff bc57 	b.w	8005d84 <_malloc_r>
 80064d6:	b92a      	cbnz	r2, 80064e4 <_realloc_r+0x24>
 80064d8:	f7ff fbe8 	bl	8005cac <_free_r>
 80064dc:	4625      	mov	r5, r4
 80064de:	4628      	mov	r0, r5
 80064e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064e4:	f000 f81b 	bl	800651e <_malloc_usable_size_r>
 80064e8:	4284      	cmp	r4, r0
 80064ea:	4607      	mov	r7, r0
 80064ec:	d802      	bhi.n	80064f4 <_realloc_r+0x34>
 80064ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80064f2:	d812      	bhi.n	800651a <_realloc_r+0x5a>
 80064f4:	4621      	mov	r1, r4
 80064f6:	4640      	mov	r0, r8
 80064f8:	f7ff fc44 	bl	8005d84 <_malloc_r>
 80064fc:	4605      	mov	r5, r0
 80064fe:	2800      	cmp	r0, #0
 8006500:	d0ed      	beq.n	80064de <_realloc_r+0x1e>
 8006502:	42bc      	cmp	r4, r7
 8006504:	4622      	mov	r2, r4
 8006506:	4631      	mov	r1, r6
 8006508:	bf28      	it	cs
 800650a:	463a      	movcs	r2, r7
 800650c:	f7ff fbc0 	bl	8005c90 <memcpy>
 8006510:	4631      	mov	r1, r6
 8006512:	4640      	mov	r0, r8
 8006514:	f7ff fbca 	bl	8005cac <_free_r>
 8006518:	e7e1      	b.n	80064de <_realloc_r+0x1e>
 800651a:	4635      	mov	r5, r6
 800651c:	e7df      	b.n	80064de <_realloc_r+0x1e>

0800651e <_malloc_usable_size_r>:
 800651e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006522:	1f18      	subs	r0, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	bfbc      	itt	lt
 8006528:	580b      	ldrlt	r3, [r1, r0]
 800652a:	18c0      	addlt	r0, r0, r3
 800652c:	4770      	bx	lr
	...

08006530 <_init>:
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006532:	bf00      	nop
 8006534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006536:	bc08      	pop	{r3}
 8006538:	469e      	mov	lr, r3
 800653a:	4770      	bx	lr

0800653c <_fini>:
 800653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653e:	bf00      	nop
 8006540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006542:	bc08      	pop	{r3}
 8006544:	469e      	mov	lr, r3
 8006546:	4770      	bx	lr
